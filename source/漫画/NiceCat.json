[
  {
    "bookSourceComment": "//2025.7.5 ◎夜泽川◎",
    "bookSourceGroup": "漫画",
    "bookSourceName": "Nice Cat漫画（App）",
    "bookSourceType": 2,
    "bookSourceUrl": "Nice Cat漫画",
    "customOrder": 61,
    "enabled": true,
    "enabledCookieJar": false,
    "enabledExplore": true,
    "exploreUrl": "@js:\nJSON.stringify([\"首页（随机）\", \"同人志\", \"漫画\"].map((item, index) => {\n    let url = \"{{getUrl()}}\" + (index > 0 ? `/ComicListData/listData,` + JSON.stringify({\n        \"body\": `categoryId=${index}&date_time={{Date.now()}}&page={{page}}`,\n        \"method\": \"POST\"\n    }) : \"/HomeFeed/randomFeed\");\n    return {\n        \"title\": item,\n        \"url\": url,\n        \"style\": {\n            \"layout_flexBasisPercent\": index > 0 ? 0.45 : 1,\n            \"layout_flexGrow\": 1\n        }\n    };\n}));",
    "header": "@js:JSON.stringify(headers);",
    "jsLib": "var headers = {\n                    \"User-Agent\": \"okhttp/4.10.0\",\n                    \"n-application-type\": \"android\"\n                };\nfunction getMorningDate() {\n    const now = new Date();\n    const midnight = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);\n    return Math.floor(midnight.getTime() / 1000);\n}\n\nfunction getUrl() {\n\tconst { java, source } = this\n\teval(String(source.loginUrl));\n\treturn String(source.getVariable()).split('|')[0];\n}\n\nfunction generateDateKey() {\n    const { java } = this\n    const morningTimestamp = Math.floor(getMorningDate() * 1000).toString();\n    return java.digestBase64Str(morningTimestamp, \"SHA-256\");\n}\n\nfunction getSvg(tags) {\n\tconst { java } = this\n\tlet text = \"\";\n\tfor (let i in tags) {\n\t\ttext += `<tspan x=\"0\" dy=\"${i == 0 ? 0 : 12}\">${tags[i]}</tspan> `;\n\t\t}\n let svg =  `<svg xmlns=\"http://www.w3.org/2000/svg\" \n     viewBox=\"0 0 655 200\" \n     preserveAspectRatio=\"none\"\n     style=\"width: 100%; height: 100%;\">\n  <rect width=\"100%\" height=\"100%\" fill=\"white\"/>\n  <text x=\"50%\" y=\"30\" \n        font-size=\"20\" \n        font-weight=\"bold\" \n        text-anchor=\"middle\" \n        fill=\"#000\">请输入序号</text>\n  <text x=\"50%\" y=\"45\" \n        font-size=\"15\" \n        text-anchor=\"middle\" \n        fill=\"#666\">（如1,2,3）</text>\n  <text x=\"0\" y=\"60\" \n        font-family=\"Arial,sans-serif\" \n        font-size=\"12\" \n        fill=\"black\">\n    ${text}\n  </text>\n</svg>`;\nreturn `data:image/svg+xml;base64,${java.base64Encode(svg)}`;\n}\n\nfunction getTagUid(key) {\n    let { java } = this;\n    let tags = key.trim().replace(/^标签@/, \"\").split(/[,，]/);\n    let allTagData = [];\n\n    for (let tag of tags) {\n        try {\n            let response = java.post(\n                `${getUrl.call(this)}/ComicSearch/searchPreViewData/search`,\n                `searchContent=${tag.trim()}`, \n                headers\n            );\n\n            let searchData = JSON.parse(response.body()).data;\n            let tagItems = searchData\n                .filter(item => item.hasOwnProperty('uid'))\n                .map((item, index) => ({\n                    display: `${index + 1}、${item.name}`,\n                    uid: item.uid,\n                    name: item.name,\n                    tag: tag.trim()\n                }));\n\n            if (tagItems.length > 0) {\n                allTagData.push(tagItems);\n            }\n        } catch (error) {\n            java.toast(`搜索 \"${tag.trim()}\"标签出错`);\n            java.log(error.message);\n        }\n    }\n\n    if (allTagData.length === 0) {\n        java.toast('没有找到匹配的标签');\n        return;\n    }\n\n    let displayLines = allTagData.map((tagItems, i) => {\n        let displayText = tagItems.map(item => item.display).join('; ');\n        return `${tags[i].trim()}：${displayText}`;\n    });\n\n    let userInput = java.getVerificationCode(getSvg.call(this, displayLines));\n    let selectedIndexes = String(userInput).split(/[,，]/);\n    let selectedUids = [];\n\n    selectedIndexes.forEach((indexStr, k) => {\n        let index = parseInt(indexStr.trim()) - 1;\n        if (index >= 0 && index < allTagData[k]?.length) {\n            selectedUids.push(allTagData[k][index].uid);\n        } else {\n            Packages.java.lang.Thread.sleep(50);\n            java.toast(`${tags[k]}：序号 ${indexStr} 超出范围\\n不进行搜索`);\n        }\n    });\n\n    if (selectedUids.length > 0) {\n        return JSON.stringify(selectedUids);\n    } else {\n        java.toast('未选取到有效标签');\n    }\n}",
    "lastUpdateTime": 1752038235909,
    "loginCheckJs": "if (/searchTag/.test(result.url()) && page == 1) {\n    let searchId = JSON.parse(result.body()).data.searchId;\nsource.setVariable(String(source.getVariable()).split('|')[0] + '|' + searchId);\n}\nresult;",
    "loginUi": "[\n    {\n        \"name\": \"获取接口\",\n        \"type\": \"button\",\n        \"action\": \"getBaseUrl()\",\n        \"style\": {\n            \"layout_flexBasisPercent\": 1,\n            \"layout_flexGrow\": 1\n        }\n    }\n]",
    "loginUrl": "function getBaseUrl() {\n\tlet BaseUrl = \"https://kx75.fun/api\";\n\ttry {\n    BaseUrl = JSON.parse(java.get(\"https://update.kx75.fun/update/update.php\", {\"User-Agent\": \"okhttp/4.10.0\",\"n-application-type\": \"android\"}).body()).StartApiDomain;\n    if (!BaseUrl || BaseUrl.trim() == '') throw new Error('网络接口为空');\n    java.toast(`网络api接口获取成功\\n${BaseUrl}`);\n    } catch (e) {\n    \tjava.log(e.message);\n    \tjava.toast(`\\n网络api接口获取失败，已设置为默认接口\\n${BaseUrl}`);\n    \t}\n    source.setVariable(BaseUrl);\n}\nif (source.getVariable() == '') getBaseUrl();",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "$.tagData.artist[*].name",
      "coverUrl": "$.image",
      "init": "$.data.comicData",
      "intro": "上传者：{{$.uploader.name}}",
      "kind": "评分{{$.rating}}\n{{$.tagData..name}}",
      "name": "$.name_one"
    },
    "ruleContent": {
      "content": "@js:JSON.parse(src).data.imageData.map(i => `<img src=\"${i.imageUrl}\">`).join('\\n');"
    },
    "ruleExplore": {
      "bookList": "$.data.comic_data[*].data[*]||$.data",
      "bookUrl": "{{getUrl()}}/ComicInfo/info,{\n  \"body\": \"uid={{$.uid}}\",\n  \"method\": \"POST\"\n}",
      "coverUrl": "$.image",
      "name": "$.name"
    },
    "ruleSearch": {
      "bookList": "$.data.comicData.data||$.data.comic.data",
      "bookUrl": "{{getUrl()}}/ComicInfo/info,{\n  \"body\": \"uid={{$.uid}}\",\n  \"method\": \"POST\"\n}",
      "checkKeyWord": "标签@韩漫",
      "coverUrl": "$.image",
      "intro": "上传者：{{$.uploader.userName}}",
      "kind": "{{$.table_create_time}}\n评分{{$.rating}}\n漫画{{$.categories}}同人志\n@js:result.replace(/漫画1|2同人志/, \"\").replace(\"漫画9同人志\", \"杂项\");",
      "name": "$.en_name"
    },
    "ruleToc": {
      "chapterList": "@js:\nlet dateKey = generateDateKey();\nlet Data = JSON.parse(src).data.comicData;\nlet body = `comicUid=${Data.uid}&sort=0&dateKey=${dateKey}`;\nlet chapterurl =  `${getUrl()}/ComicOrder/getComicOrder,` + JSON.stringify({\n  \"body\": body,\n  \"method\": \"POST\"\n});\nlet chapterList = [{\"name\": Data.name_one, \"url\": chapterurl}];\nchapterList;",
      "chapterName": "name",
      "chapterUrl": "url"
    },
    "searchUrl": "@js:\n/*\n\t多标签🏷️搜索：\n\t标签@标签1,标签2,标签3\n\t允许中 / 英文逗号分割\n*/\nlet searchUrl, body;\nif (key.startsWith('标签@')) {\n    searchUrl = \"{{getUrl()}}/ComicSearch/searchTag,\";\n    body = page == 1 ? `tagUid=${getTagUid(key)}` : `searchId=${String(source.getVariable()).split('|')[1]}`;\n} else {\n    searchUrl = \"{{getUrl()}}/ComicSearch/search,\";\n    body = `content=${key.trim()}`;\n}\n\nresult = searchUrl + JSON.stringify({\n    \"body\": body,\n    \"method\": \"POST\"\n});",
    "weight": 0
  }
]