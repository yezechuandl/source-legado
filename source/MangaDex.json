[
  {
    "bookSourceComment": "//2025.4.16 ◎夜泽川◎",
    "bookSourceGroup": "漫画,自制",
    "bookSourceName": "MangaDex漫画",
    "bookSourceType": 2,
    "bookSourceUrl": "https://mangadex.org",
    "customOrder": 40,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\neval(String(source.loginUrl));\nvar result = [];\npush = (title, url, size) => result.push({\n    title: title,\n    url: url,\n    style: {\n        layout_flexGrow: 1,\n        layout_flexBasisPercent: size\n    }\n});\npush(\"全部\", `https://api.mangadex.org/manga?limit=32&offset={{(page-1)*32}}&includes[]=cover_art&includedTagsMode=AND&excludedTagsMode=OR{{buildQueryParams()}}`, 1);\n\nsorts.map(([title, key, order]) => {\n    push(title, `https://api.mangadex.org/manga?limit=32&offset={{(page-1)*32}}&includes[]=cover_art&includedTagsMode=AND&excludedTagsMode=OR{{buildQueryParams(\"分类\")}}&order[${key}]=${order}`, 0.45);\n}\n);\nJSON.stringify(result);",
    "header": "{\"User-Agent\": \"Mozilla/5.0 (Linux; Android 9) Mobile Safari/537.36\"}",
    "jsLib": "function formatDate(dateStr) {\n  const date = new Date(dateStr);\n  const pad = n => String(n).padStart(2, '0');\n  return `${date.getFullYear()}-${pad(date.getMonth()+1)}-${pad(date.getDate())} ` +\n         `${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;\n}\nvar contentRating = [[\"普通\",\"safe\"],[\"粗略\",\"suggestive\"],[\"限制\",\"erotica\"]];\nvar sorts = [\n    [\"最佳匹配\", \"relevance\", \"desc\"],\n    [\"最新上传\", \"latestUploadedChapter\", \"desc\"],\n    [\"最旧上传\", \"latestUploadedChapter\", \"asc\"],\n    [\"标题升序\", \"title\", \"asc\"],\n    [\"标题降序\", \"title\", \"desc\"],\n    [\"最高评级\", \"rating\", \"desc\"],\n    [\"最低评级\", \"rating\", \"asc\"],\n    [\"最多关注\", \"followedCount\", \"desc\"],\n    [\"最少关注\", \"followedCount\", \"asc\"],\n    [\"最近添加\", \"createdAt\", \"desc\"],\n    [\"最早添加\", \"createdAt\", \"asc\"],\n    [\"年份升序\", \"year\", \"asc\"],\n    [\"年份倒序\", \"year\", \"desc\"]\n];\n\nfunction buildQueryParams(e) {\n\tconst { source } = this\n\tlet selected = JSON.parse(source.getVariable());\n  let query = '';\n  const allRatings = contentRating.map(([Str,tag]) => tag);\n\n  allRatings.forEach((rating, index) => {\n    if (selected.contentRating.includes(rating)) {\n      const encoded = `contentRating[]=${rating}`;\n      \n      query += `&${encoded}`;\n    }\n  });\n  if (selected.Language) {\n    let languages = selected.Language.split(\",\");\n    query += languages.map(item => `&originalLanguage[]=${item}`).join('');\n  }\n  if (selected.sort && e !== \"分类\") {\n  \tlet sort_ = selected.sort.split(\",\");\n    query += `&order[${sort_[0]}]=${sort_[1]}`;\n    }\n  return query;\n}\n\nfunction getLanguage(str) {\n    const languageMap = {\"en\":\"英语\",\"en-us\":\"英语（美国）\",\"en-gb\":\"英语（英国）\",\"en-au\":\"英语（澳大利亚）\",\"en-ca\":\"英语（加拿大）\",\"zh\":\"中文\",\"zh-tw\":\"繁体中文（台湾）\",\"zh-hk\":\"繁体中文（香港）\",\"es\":\"西班牙语\",\"es-mx\":\"西班牙语（墨西哥）\",\"es-ar\":\"西班牙语（阿根廷）\",\"es-es\":\"西班牙语（西班牙）\",\"fr\":\"法语\",\"fr-fr\":\"法语（法国）\",\"fr-ca\":\"法语（加拿大）\",\"de\":\"德语\",\"de-de\":\"德语（德国）\",\"de-at\":\"德语（奥地利）\",\"ja\":\"日语\",\"ja-jp\":\"日语（日本）\",\"ru\":\"俄语\",\"ru-ru\":\"俄语（俄罗斯）\",\"pt\":\"葡萄牙语\",\"pt-br\":\"葡萄牙语（巴西）\",\"pt-pt\":\"葡萄牙语（葡萄牙）\",\"it\":\"意大利语\",\"it-it\":\"意大利语（意大利）\",\"ko\":\"韩语\",\"ko-kr\":\"韩语（韩国）\",\"ar\":\"阿拉伯语\",\"ar-ae\":\"阿拉伯语（阿联酋）\",\"ar-sa\":\"阿拉伯语（沙特）\",\"nl\":\"荷兰语\",\"nl-nl\":\"荷兰语（荷兰）\",\"sv\":\"瑞典语\",\"sv-se\":\"瑞典语（瑞典）\",\"da\":\"丹麦语\",\"da-dk\":\"丹麦语（丹麦）\",\"no\":\"挪威语\",\"no-no\":\"挪威语（挪威）\",\"fi\":\"芬兰语\",\"fi-fi\":\"芬兰语（芬兰）\",\"tr\":\"土耳其语\",\"tr-tr\":\"土耳其语（土耳其）\",\"el\":\"希腊语\",\"el-gr\":\"希腊语（希腊）\",\"he\":\"希伯来语\",\"he-il\":\"希伯来语（以色列）\",\"pl\":\"波兰语\",\"pl-pl\":\"波兰语（波兰）\",\"hu\":\"匈牙利语\",\"hu-hu\":\"匈牙利语（匈牙利）\",\"th\":\"泰语\",\"th-th\":\"泰语（泰国）\",\"vi\":\"越南语\",\"vi-vn\":\"越南语（越南）\",\"id\":\"印尼语\",\"id-id\":\"印尼语（印尼）\",\"ms\":\"马来语\",\"my\":\"马来语（马来西亚）\",\"ro\":\"罗马尼亚语\",\"ro-ro\":\"罗马尼亚语（罗马尼亚）\",\"bg\":\"保加利亚语\",\"bg-bg\":\"保加利亚语（保加利亚）\",\"hr\":\"克罗地亚语\",\"hr-hr\":\"克罗地亚语（克罗地亚）\",\"cs\":\"捷克语\",\"cs-cz\":\"捷克语（捷克）\",\"sk\":\"斯洛伐克语\",\"sk-sk\":\"斯洛伐克语（斯洛伐克）\",\"sl\":\"斯洛文尼亚语\",\"sl-si\":\"斯洛文尼亚语（斯洛文尼亚）\",\"et\":\"爱沙尼亚语\",\"et-ee\":\"爱沙尼亚语（爱沙尼亚）\",\"lv\":\"拉脱维亚语\",\"lv-lv\":\"拉脱维亚语（拉脱维亚）\",\"lt\":\"立陶宛语\",\"lt-lt\":\"立陶宛语（立陶宛）\",\"uk\":\"乌克兰语\",\"uk-ua\":\"乌克兰语（乌克兰）\",\"be\":\"白俄罗斯语\",\"be-by\":\"白俄罗斯语（白俄罗斯）\"};\n    if (languageMap.hasOwnProperty(str)) {\n        return languageMap[str];\n    }\n    const primaryCode = str.split(\"-\")[0];\n    return languageMap[primaryCode] || str;\n}",
    "lastUpdateTime": 1745899097179,
    "loginUi": "[ \n {\n        \"name\": \"登录\",\n        \"type\": \"button\",\n        \"action\": \"Login('登录')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n       }\n  },\n  {\n        \"name\": \"登出\",\n        \"type\": \"button\",\n        \"action\": \"Login('登出')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n       }\n  },\n {\n        \"name\": \"展示选择\",\n        \"type\": \"button\",\n        \"action\": \"Show()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n       }\n  },\n {\n        \"name\": \"级别设置\",\n        \"type\": \"button\",\n        \"action\": \"\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n   },\n  {\n        \"name\": \"普通\",\n        \"type\": \"button\",\n        \"action\": \"Put_contentRating(0)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"粗略\",\n        \"type\": \"button\",\n        \"action\": \"Put_contentRating(1)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"限制\",\n        \"type\": \"button\",\n        \"action\": \"Put_contentRating(2)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"排序切换\",\n        \"type\": \"button\",\n        \"action\": \"\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"默认\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort('默认')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最佳匹配\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(0)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最新上传\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(1)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最旧上传\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(2)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"标题升序\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(3)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"标题倒序\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(4)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最高评分\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(5)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最低评分\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(6)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最多关注\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(7)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最少关注\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(8)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最近添加\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(9)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"最早添加\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(10)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"年份升序\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(11)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"年份倒序\",\n        \"type\": \"button\",\n        \"action\": \"Put_Sort(12)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"语言/缩写（英文逗号分隔多个语言）\",\n        \"type\": \"text\",\n        \"action\": \"\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n   }\n]",
    "loginUrl": "if (source.getVariable() == \"\") {\n    java.toast('已初始化');\n    let option = {\n        contentRating: ['safe', 'suggestive', 'erotica'],\n        sort: \"\",\n        Language: \"\"\n    }\n    source.setVariable(JSON.stringify(option, null, \"\\t\"));\n}\nfunction Login(l) {\n\tlet url = source.key;\n\tif ( l === \"登出\") {\n\tjava.toast('请浏览器手动登出');\n}\n\tcookie.removeCookie(url);\n\tsource.removeLoginHeader();\n\tjava.startBrowserAwait(url,\"登录\",false);\n}\nvar svb = JSON.parse(source.getVariable());\nfunction Show() {\n    let text = [];\n    const target = svb.contentRating;\n    const [sortField, sortOrder] = svb.sort.split(\",\");\n    const languages = svb.Language.split(\",\").map(x => getLanguage(x)).join(\" | \");\n    text.push(`\\n语言：${languages ? languages : \"所有语言\"}`);\n    const sortKey = sortField || \"\";\n    const sortStr = sorts.find(([_, or, ord]) =>\n        sortKey.includes(or) && ord === sortOrder)?. [0] || \"默认\";\n    text.push(`排序方式：${sortStr}`);\n\n    const contentStr = contentRating\n        .filter(([_, cr]) => target.includes(cr))\n        .map(([str]) => str)\n        .join(\" | \") || \"未设置\";\n    text.push(`内容等级：${contentStr}`);\n\n    text = text.join(\"\\n\");\n    java.toast(text);\n}\n\nfunction Put_contentRating(e) {\n    let tag = contentRating[e][1];\n    let tagStr = contentRating[e][0];\n    if (svb.contentRating.includes(tag)) {\n        java.toast(`\\n已取消展示【${tagStr}级】作品❌`);\n        svb.contentRating = svb.contentRating.filter(item => item !== tag);\n        java.log(JSON.stringify(svb.contentRating))\n    } else {\n        java.toast(`\\n已添加展示【${tagStr}级】作品✔️`);\n        svb.contentRating.push(tag);\n    }\n    source.setVariable(JSON.stringify(svb, null, \"\\t\"));\n}\n\nfunction Put_Sort(e) {\n\t  let sort , point;\n    if (e !== \"默认\") {\n        sort_ = sorts[e][1] + \",\" + sorts[e][2];\n        point = sorts[e][0];\n    } else {\n        sort_ = \"\";\n        point = e;\n    }\n    svb.sort = sort_;\n    source.setVariable(JSON.stringify(svb, null, \"\\t\"));\n    java.toast(`\\n已切换排序为【${point}】`);\n}\n\nfunction login() {\n    svb.Language = source.getLoginInfoMap()[\"语言/缩写（英文逗号分隔多个语言）\"].toLowerCase();\n    source.setVariable(JSON.stringify(svb, null, \"\\t\"));\n}",
    "respondTime": 180000,
    "ruleBookInfo": {
      "coverUrl": "https://mangadex.org/covers/{$.id}/{$..fileName}.256.jpg",
      "init": "$.data",
      "intro": "@js:\nconst list = JSON.parse(JSON.stringify(src));\nconst description = list.attributes.description;\nconst originalLang = list.attributes.originalLanguage;\nlet result;\nif (description['zh-hk']) {\n  result = description['zh-hk'];\n} else if (description['en']) {\n  result = description['en'];\n} else if (description[originalLang]) {\n  result = description[originalLang];\n} else {\n  result = list.attributes.title.en;\n}\nresult = result.split('\\n')[0];",
      "kind": "{$.attributes.originalLanguage},{$.type},{$.attributes.tags..en}\n@js:Array.from(result).join('\\n').replace(/\\n/,\"\");",
      "name": "@js:\nconst list = JSON.parse(JSON.stringify(src));\nconst altTitles = list.attributes.altTitles;\nconst originalLang = list.attributes.originalLanguage;\nconst znEntry = altTitles.find(item => 'zn' in item);\nif (znEntry) {\n  result = znEntry.zn;\n} else {\n  const zhHkEntry = altTitles.find(item => 'zh-hk' in item);\n  if (zhHkEntry) {\n    result = zhHkEntry['zh-hk'];\n  } else {\n    const originalEntry = altTitles.find(item => originalLang in item);\n    result = originalEntry?.[originalLang] || list.attributes.title.en;\n  }\n}\nresult.split('\\n')[0];",
      "tocUrl": "https://api.mangadex.org/manga/{$.id}/feed?limit=96&includes[]=scanlation_group&includes[]=user&order[volume]=asc&order[chapter]=asc&offset=0&contentRating[]=safe&contentRating[]=suggestive&contentRating[]=erotica&contentRating[]=pornographic",
      "wordCount": ""
    },
    "ruleContent": {
      "content": "@js:\nvar data = JSON.parse(src);\nvar base_url = data.baseUrl;\nvar imglist = data.chapter.data;\nvar hash = data.chapter.hash;\nresult = imglist.map( x => `<img src=\"${base_url}/data/${hash}/${x}\">`);\nresult.join(\"\\n\");",
      "imageStyle": "FULL"
    },
    "ruleExplore": {
      "bookList": "",
      "bookUrl": "",
      "coverUrl": "",
      "intro": "",
      "kind": "",
      "name": ""
    },
    "ruleSearch": {
      "author": "",
      "bookList": "$.data[*]",
      "bookUrl": "https://api.mangadex.org/manga/{$.id}?includes[]=artist&includes[]=author&includes[]=cover_art",
      "coverUrl": "https://mangadex.org/covers/{$.id}/{$..fileName}.256.jpg",
      "intro": "@js:\nconst list = JSON.parse(JSON.stringify(src));\nconst description = list.attributes.description;\nconst originalLang = list.attributes.originalLanguage;\nlet result;\nif (description['zh-hk']) {\n  result = description['zh-hk'];\n} else if (description['en']) {\n  result = description['en'];\n} else if (description[originalLang]) {\n  result = description[originalLang];\n} else {\n  result = list.attributes.title.en;\n}\nresult = result.split('\\n')[0];",
      "kind": "{$.attributes.originalLanguage},{$.type},{$.attributes.tags..en}\n@js:Array.from(result).join('\\n').replace(/\\n/,\"\");",
      "name": "@js:\nconst list = JSON.parse(JSON.stringify(src));\nconst altTitles = list.attributes.altTitles;\nconst originalLang = list.attributes.originalLanguage;\nconst zhEntry = altTitles.find(item => 'zh' in item);\nif (zhEntry) {\n  result = zhEntry.zh;\n} else {\n  const zhHkEntry = altTitles.find(item => 'zh-hk' in item);\n  if (zhHkEntry) {\n    result = zhHkEntry['zh-hk'];\n  } else {\n    const originalEntry = altTitles.find(item => originalLang in item);\n    result = originalEntry?.[originalLang] || list.attributes.title.en;\n  }\n}\nresult.split(\"\\n\")[0];"
    },
    "ruleToc": {
      "chapterList": "@js:\nvar lists_ = [];\nvar seenChapters = new Set();\nvar volumeCounter = {};\n\nJSON.parse(src).data.forEach(chapter => {\n    const { chapter: chap, updatedAt, translatedLanguage } = chapter.attributes;\n    const url = chapter.id;\n    \n    if (!seenChapters.has(chap)) {\n        seenChapters.add(chap);\n        lists_.push({\n            title: `第${chap}章 分译`, \n            url : \"\",\n            volume: 1\n        });\n        volumeCounter[chap] = 0;\n    }\n    const isChapter = true;\n    if (isChapter) {\n        volumeCounter[chap] += 1;\n    }\n\n    lists_.push({\n        title: `第${chap}章 （译文${volumeCounter[chap]}）`,\n        url: `https://api.mangadex.org/at-home/server/${url}?forcePort443=false`,\n        info: `${formatDate(updatedAt)} | ${getLanguage(translatedLanguage)}`,\n        volume: 0\n    });\n});\n//java.log(JSON.stringify(lists_))\nlists_;",
      "chapterName": "title",
      "chapterUrl": "url",
      "isVolume": "volume",
      "nextTocUrl": "@js: var result = [];\nconst pages = Math.ceil(JSON.parse(src).total / JSON.parse(src).limit) - 1;\n//java.log(pages);\nfor (let i=1;i <= pages;i++) {\nurl = baseUrl.replace(/offset=0/,`offset=${i*96}`)\nresult.push(url);\n}\nresult;",
      "updateTime": "info"
    },
    "searchUrl": "@js:\neval(String(source.loginUrl));\nresult = `https://api.mangadex.org/manga?limit=32&offset={{(page-1)*32}}&title={{key}}&includes[]=cover_art&includedTagsMode=AND&excludedTagsMode=OR{{buildQueryParams()}}`;\nresult;",
    "weight": 0
  }
]