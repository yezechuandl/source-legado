[
  {
    "bookSourceComment": "//25.04.25\n//Authorization头处理 ◎夜泽川◎\n//2025.5.7 修复发现，解密正文。 ◎夜泽川◎\n//2025.6.10 添加书评。 ◎夜泽川◎\n//2025.6.24 处理网站速率限制 ◎夜泽川◎",
    "bookSourceGroup": "轻小说",
    "bookSourceName": "汉化社区",
    "bookSourceType": 0,
    "bookSourceUrl": "https://freenovel.sbs",
    "customOrder": 356,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\neval(String(source.loginUrl));\nvar result = [];\nvar push = (title, Url, size, parame) => {\n    result.push({\n        title: title,\n        url: typeof Url === \"number\" ? `@js:function buildingUrL(url, pages, id, platform) {\n    let body = {\n        \"platform\": platform,\n        \"tabIds\": id,\n        \"fontNumber\": JSON.parse(source.getVariable()).wordNumber,\n        \"page\": pages - 1,\n        \"size\": 30\n    };\n    \n    let headers = {\n        \"Authorization\": mn(url, \"POST\", body),\n        \"Content-Type\": \"application/json\"\n    };\n    \n    let result = url + \",\" + JSON.stringify({\n        \"body\": JSON.stringify(body),\n        \"headers\": headers,\n        \"method\": \"POST\"\n    });\n    \n    return result;\n}\nbuildingUrL(source.key + \"/api/novels/getNovelsByPlatform\",page,${Url},\"${parame}\");` : Url,\n        style: {\n            layout_flexGrow: 1,\n            layout_flexBasisPercent: size\n        }\n    });\n}\nif (source.getLoginHeader() && Login_check()) {\n\t  push(\"我的收藏\", null, 1);\n\t  var collecturl = source.key + \"/api/favoriteGroups/getAllFavoriteGroups\";\n\t  var collect = JSON.parse(java.get(collecturl,{\n        \"Authorization\": mn(collecturl, \"GET\")\n    }).body()).forEach(item => {\n    let url = `@js:if (page === 1) {\n    let collect_url = source.key + \"/api/favorites/user/group/${item.id}\";\n    collect_url += \",\" + JSON.stringify({\n        \"headers\": {\n        \"Authorization\": mn(collect_url, \"GET\")\n    },\n        \"method\": \"GET\"\n    });}`;\n    push(item.name, url, 0.45);\n});\n    push(\"书库分类\", null, 1);\n    var T = [\"novelPia\",\"upload\"];\n   for (let i of T) {\n\t  push(`>>> ${i} 库<<<`, null, 1);\n    var T_url = source.key + \"/api/tag/all/\" + i;\n    var T_header = {\n        \"Authorization\": mn(T_url, \"GET\")\n    };\n    var tagArry = JSON.parse(java.get(T_url, T_header).body());\n    tagArry.unshift({\"id\":0,\"name\":\"全部\"});\n    let tagNumber = JSON.parse(source.getVariable()).tagNumber.split('|');\n    let range = tagNumber == \"全部\" ? tagArry.length - 1 : +(i === \"novelPia\" ? tagNumber[0] : tagNumber[1]);\nfor (let index = 0; index <= range && index < tagArry.length; index++) {\n        let item = tagArry[index];\n        let size = item.id == 0 ? 1 : 0.25;\n        push(item.name, item.id, size, i);\n      }\n   }\n} else {\n    push(\"未登录\", null, 1);\n}\nJSON.stringify(result);",
    "header": "<js>\nJSON.stringify({\n  'User-Agent': \"Mozilla/5.0 (Linux; Android 15; V2304A Build/AP3A.240905.015.A2; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/126.0.6478.71 Mobile Safari/537.36\",\n'Content-Type': \"application/json\"\n});\n</js>",
    "jsLib": "function wn(t) {\n                return \"object\" !== typeof t || null === t ? t :\n                    Array.isArray(t) ? t.map(wn) : Object.keys(t)\n                    .sort().reduce(((e, n) => (e[n] = wn(t[n]),\n                    e)), {})\n}\n\nfunction mn(u, i, b) {\n\t const { java , source } = this\n\t let result;\n\t if (source.getLoginHeader()) {\n  const e = source.getLoginHeaderMap().get(\"Authorization\");\n  const n = Date.now();\n  const base64String = java.base64Encode(n + u + e);\n  const r = java.md5Encode(base64String);\n\t const l = java.toURL(u).searchParams ? wn(Object.fromEntries(Array.from(java.toURL(u).searchParams).map(([k, v]) => [k, String(v)]))) : {};\n  const s = java.toURL(u).pathname;\n  const g = b ? wn(b) : {};\n  const h = [i,s,JSON.stringify(l),JSON.stringify(g),n,r].join(\"|\");\n  //java.log(h);\n  let key = java.HMacHex(h, \"HmacSHA256\", e);\n  result = String(`${e};${key};${n};${r}`);\n } else {\n \t java.toast('未登录');\n \t result = \"\";\n \t}\n return result;\n}\n\n//Authorization头过期校验（发现专用）\nfunction Login_check() {\n\t  const { java, source, cookie } = this\n\t  var login_checkUrl = source.key + \"/api/auth/isLogin\";\n\t  if (source.getLoginHeader() && java.connect(login_checkUrl + \",\" + JSON.stringify({\"headers\":{\n        \"Authorization\": mn.call(this, login_checkUrl, \"GET\")\n    }})).code() >= 400) {\n    eval(String(source.loginUrl));\n    Login();\n    }\nreturn true;\n}\n\nfunction formatDate(dateStr) {\n  const date = new Date(dateStr);\n  const pad = n => String(n).padStart(2, '0');\n  return `${date.getFullYear()}-${pad(date.getMonth()+1)}-${pad(date.getDate())} ` +\n         `${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;\n}\n\nfunction decryptData(Data) {\n\t      const { java, source } = this \n    try {\n    \t   const userkey = source.getLoginHeaderMap().get(\"Authorization\");\n        const fullData = java.base64DecodeToByteArray(Data);\n        const ivBytes = fullData.slice(0, 16);\n        const ContentBytes = fullData.slice(16);\n        \n        const keyTime = 60000 * Math.floor(Date.now() / 60000);\n        const keyTimes = [keyTime, keyTime - 60000, keyTime - 60000*2];\n        //java.log(keyTimes.toString());\n        \n        for (let ks of keyTimes) {\n            try {\n                let keyHex = java.digestHex(userkey + ks, \"SHA-256\");\n                let keyBytes = java.hexDecodeToByteArray(keyHex);\n                \n                let cipher = java.createSymmetricCrypto(\n                    \"AES/CBC/PKCS7Padding\",\n                    keyBytes,\n                    ivBytes\n                );\n                \n                let content = cipher.decryptStr(ContentBytes);\n                //java.log(content);\n                if (content) {\n                \treturn String(content);\n                \t}\n            } catch(e) {\n                java.log(`使用【${ks}】拼接密匙，解密失败\\n` +  e);\n            }\n        }\n        throw new Error(\"所有密钥失效\");\n    } catch(e) {\n        throw new Error(`解密过程出错: \\n${e}`);\n    }\n}\n\nvar javaImport = new JavaImporter();\njavaImport.importPackage(\n    Packages.okhttp3\n);\n//构建Put请求函数;\nfunction OkhttpPut(url, headers) {\n        const { java } = this\n        with(javaImport) {\n        var body = RequestBody.create(null, \"\");\n        \n        var requestBuilder = new Request.Builder()\n            .url(url)\n            .put(body);\n\n        if (headers) {\n            for (let key in headers) {\n                requestBuilder.addHeader(key, headers[key]);\n            }\n        }\n\n        //java.log(\"PUT: \" + url + ',{\"headers\":' + JSON.stringify(headers) + \"}\");\n        \n        let client = new OkHttpClient();\n        let response = client.newCall(requestBuilder.build()).execute();\n        let ResponseBody = response.body().string();\n        if (ResponseBody.includes('Invalid signature')) {\n        throw new Error(\"请求Authorization头过期，请检验登录状态\");\n        }\n        return JSON.parse(ResponseBody);\n    }\n}\n\nfunction getTagList(str, ca) {\n\t   const { source, java } = this;\n    let url = `${source.key}/api/tag/allByKeywordBugNoFilter/${str}`;\n    if (!ca) url = `${source.key}/api/tag-filters/getFilterTag`;\n    let tags = java.get(url, {\n            \"Authorization\": mn.call(this, url, \"GET\")\n        }).body();\n    let result = JSON.parse(tags);\n   if (result.length == 0) java.toast(\"标签为空\");\n   return result;\n}\n\nfunction mydislikeTag(tagList) {\n\t   const { java } = this;\n    let html = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"><title>标签ID表格</title><style>*{box-sizing:border-box}body{font-family:Arial,sans-serif;background:#f5f5f5;color:#333;padding:15px;margin:0;font-size:16px;line-height:1.5}.container{max-width:100%;margin:0 auto}h1{text-align:center;margin-bottom:25px;color:#333;font-size:24px}.confirm-btn{display:block;width:100%;max-width:300px;margin:0 auto 25px auto;padding:15px 20px;background:#007bff;color:white;border:none;border-radius:8px;cursor:pointer;font-size:18px;font-weight:bold;transition:background 0.3s;touch-action:manipulation}.confirm-btn:hover,.confirm-btn:active{background:#0056b3}table{width:100%;border-collapse:collapse;background:white;border-radius:10px;overflow:hidden;box-shadow:0 4px 12px rgba(0,0,0,0.1)}th,td{padding:16px 12px;text-align:left;border-bottom:1px solid #eee;vertical-align:middle}th{background:#f8f9fa;font-weight:bold;color:#333;font-size:16px;position:sticky;top:0;z-index:10}tr:hover{background:#f5f5f5}tr:last-child td{border-bottom:none}.id-cell{font-family:'Courier New',monospace;color:#666;font-size:16px;font-weight:bold}.select-btn{padding:12px 16px;background:#28a745;color:white;border:none;border-radius:6px;cursor:pointer;font-size:16px;font-weight:bold;min-width:80px;transition:all 0.3s;touch-action:manipulation}.select-btn:hover,.select-btn:active{background:#1e7e34;transform:scale(0.98)}.select-btn.selected{background:#dc3545}.select-btn.selected:hover,.select-btn.selected:active{background:#c82333}.hidden-tag{display:none}@media (max-width:768px){body{padding:10px;font-size:18px}h1{font-size:22px;margin-bottom:20px}.confirm-btn{padding:18px 20px;font-size:20px;margin-bottom:20px}table{border-radius:8px}th,td{padding:18px 10px;font-size:17px}th{font-size:17px}.id-cell{font-size:17px}.select-btn{padding:14px 18px;font-size:18px;min-width:90px;border-radius:8px}td:first-child{word-break:break-word;hyphens:auto}}@media (max-width:480px){body{padding:8px}th,td{padding:15px 8px}.select-btn{min-width:85px;padding:12px 15px}}</style></head><body><div class=\"container\"><h1>🏷️标签列表</h1><button class=\"confirm-btn\" onclick=\"confirmSelection()\">确认选择</button><table><thead><tr><th>标签</th><th>ID</th><th>操作</th></tr></thead><tbody>◎◎</tbody></table><a id=\"change\" href=\"\" class=\"hidden-tag\"></a></div><script>let selectedItems=[];function toggleSelection(button,id,label){const itemIndex=selectedItems.findIndex(item=>item.id===id);if(itemIndex!==-1){selectedItems.splice(itemIndex,1);button.textContent='选择';button.classList.remove('selected')}else{selectedItems.push({id:id,label:label});button.textContent='取消';button.classList.add('selected')}}function confirmSelection(){const hiddenTag=document.getElementById('change');if(selectedItems.length>0){const hrefValue=selectedItems.map(item=>item.label+\"|\"+item.id).join(',');hiddenTag.href=hrefValue;alert(\"已确认选择：\"+hrefValue.split(',').map(i=>i.split('|')[0]));}else{hiddenTag.href='';alert('请先选择标签！')}}</script></body></html>`;\n    let label = tagList.map(e => `<tr><td>${e.tagName || e.name}</td><td class=\"id-cell\">${e.tagId || e.id}</td><td><button class=\"select-btn\" onclick=\"toggleSelection(this,'${e.id}','${e.tagName || e.name}')\">选择</button></td></tr>`).join('');\n    html = html.replace(/◎◎/, label);\n    return java.base64Encode(html);\n}",
    "lastUpdateTime": 1753518067963,
    "loginCheckJs": "const originalResult = result;\nconst isDataUrl = result.url() == \"http://localhost/\";\n\nfunction getStrResponse() {\n    if (isDataUrl) {\n        let url = java.hexDecodeToString(originalResult.body());\n        let headers = JSON.stringify({\n            headers: {\n                Authorization: mn(url, \"GET\")\n            }\n        });\n        return java.connect(`${url},${headers}`);\n    } else {\n        java.initUrl();\n        return java.getStrResponse(null, null, false);\n    }\n}\n\nresult = isDataUrl ? getStrResponse() : result;\n\n//登录头过期处理\nif (source.getLoginHeader() && result.body().includes('Invalid signature')) {\n    eval(String(source.loginUrl));\n    Login();\n    result = getStrResponse();\n}\n\ntry {\n    if (book) {\n        //书架刷新并发多线程限制\n        while (true) {\n            if (!cache.get(\"汉化社区\")) {\n                let lockId = Date.now() + \"_\" + java.randomUUID();\n                cache.put(\"汉化社区\", lockId);\n                if (cache.get(\"汉化社区\") == lockId) {\n                    break;\n                }\n            } else if (cache.get(\"汉化社区\") && Date.now() - Number(cache.get(\"汉化社区\").split('_')[0]) > 60000) {\n                /*\n                 java.log(time);\n                 java.log(cacheKey);\n                 */\n                cache.delete(\"汉化社区\");\n            }\n            Packages.java.lang.Thread.sleep(50);\n        }\n    }\n    // 速率限制重试机制\n    let retryCount = 0;\n    while (result.body().includes('error code: 1015') && retryCount < 5) {\n        let delay = Math.floor(1000 * Math.min(30, (3 + (2 ** retryCount)) + Math.random() * 3));\n        java.toast(`\\n${book ? '【' + book.name + '】' : ''}\\n速率限制，请等待${delay/1000}秒\\n重试次数：${retryCount+1}/5`);\n        Packages.java.lang.Thread.sleep(delay);\n        result = getStrResponse();\n        retryCount++;\n    }\n\n    if (result.body().includes('error code: 1015')) {\n        java.toast('请求被限制，请稍后重试！');\n    }\n} finally {\n    cache.delete(\"汉化社区\");\n}\nresult;",
    "loginUi": "[\n   {\n    \"name\": \"用户名\",\n    \"type\": \"text\"\n    }, \n    {\n    \"name\": \"密码\",\n    \"type\": \"password\"\n    }, \n    {\n    \"name\": \"邀请码\",\n    \"type\": \"text\"\n    }, \n    {\n    \"name\": \"书籍ID（拉取更新）\",\n    \"type\": \"text\"\n    }, \n    {\n    \"name\": \"登录\",\n    \"type\": \"button\",\n    \"action\": \"Login(true)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.2\n        }\n    }, \n    {\n    \"name\": \" 登出 \",\n    \"type\": \"button\",\n    \"action\": \"LoginOut()\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.2\n        }\n    }, \n    {\n    \"name\": \"更新\",\n    \"type\": \"button\",\n    \"action\": \"bookUpdate()\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.2\n        }\n    }, \n    {\n    \"name\": \" 信息 \",\n    \"type\": \"button\",\n    \"action\": \"PrintInfo()\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.2\n        }\n    }, \n    {\n    \"name\": \"请输入标签（一次一个）\",\n    \"type\": \"text\"\n    }, \n    {\n    \"name\": \"标签屏蔽\",\n    \"type\": \"button\",\n    \"action\": \"blockTags(true)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.25\n        }\n    }, \n    {\n    \"name\": \"解除屏蔽\",\n    \"type\": \"button\",\n    \"action\": \"blockTags(false)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.25\n        }\n    }, \n    {\n    \"name\": \"书评开 / 关\",\n    \"type\": \"button\",\n    \"action\": \"Comment()\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 1\n        }\n    }, \n    {\n    \"name\": \"🏷️展示最大数目（默认36，用|分隔）\",\n    \"type\": \"text\"\n     },\n     {\n    \"name\": \" 字数过滤 \",\n    \"type\": \"button\",\n    \"action\": \"\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n    \"name\": \" 全部 \",\n    \"type\": \"button\",\n    \"action\": \"Word(0)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" ＜30万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(1)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" 30-50万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(2)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" 50-100万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(3)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" 100-200万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(4)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" ＞200万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(5)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    }\n]",
    "loginUrl": "if (source.getVariable() == \"\") {\n    let original = {\n        \"wordNumber\": \"0_1000000000\",\n        \"tagNumber\": \"36|36\",\n        \"Comment\": \"关闭\"\n    };\n    source.setVariable(JSON.stringify(original));\n    java.toast('已初始化自定义数据');\n}\n\nfunction login() {\n    let Str = source.getLoginInfoMap()?.get(\"🏷️展示最大数目（默认36，用|分隔）\") ?? \"\";\n    let original = JSON.parse(source.getVariable());\n    if (/^\\d+\\|\\d+$/.test(Str) || Str == \"全部\") {\n        original.tagNumber = Str;\n    } else {\n        original.tagNumber = \"36|36\";\n    }\n    source.setVariable(JSON.stringify(original));\n}\n\nfunction Login(c) {\n    cookie.removeCookie(source.key);\n    var name = source.getLoginInfoMap()?.get(\"用户名\") ?? \"\";\n    var word = source.getLoginInfoMap()?.get(\"密码\") ?? \"\";\n    var invitationCode = source.getLoginInfoMap()?.get(\"邀请码\") ?? \"\";\n    let so = source.key;\n    if (String(name) !== \"\" && String(word) !== \"\") {\n        let url = so + \"/api/auth/login\";\n        let body = {\n            \"email\": name,\n            \"password\": word,\n            \"invitationCode\": invitationCode\n        };\n        let parame = JSON.stringify({\n            \"body\": JSON.stringify(body),\n            \"method\": \"POST\"\n        });\n        let Data = java.ajax(url + \",\" + parame);\n        let UserData = {\n            \"Authorization\": Data\n        };\n        if (/^\\w.*-/.test(Data)) {\n            let message = c ? `\\n用户${name}\\n登录成功` : \"\\n登录掉啦，已重获登录头\";\n            java.toast(message);\n            source.putLoginHeader(JSON.stringify(UserData));\n        } else {\n            java.toast(Data);\n        }\n    } else {\n        java.toast(\"请填入必要数据后点击右上角√\");\n    }\n}\n\nfunction bookUpdate() {\n    if (!source.getLoginHeader() && Login_check()) return java.toast('未登录');\n    let bookid = result[\"书籍ID（拉取更新）\"].trim();\n    if (!/^\\d+$/.test(bookid)) return java.toast('未填写书籍ID，或格式错误');\n    let Variable = source.get(\"拉取更新\");\n    let [id, time] = Variable.split('_');\n    if (String(time) && id == bookid && Date.now() - Number(time) < 60000) return java.toast(`\\n请勿频繁拉取更新\\n本书下次使用还需等待${Math.ceil((60000 - Date.now() + Number(time)) / 1000)}秒`);\n    let url = `${source.key}/api/novelPia/executeDownloadOne/${bookid}`;\n    let message;\n    try {\n        message = java.get(url, {\n            \"Authorization\": mn(url, \"GET\")\n        }).body();\n        source.put(\"拉取更新\", bookid + \"_\" + Date.now());\n    } catch (e) {\n        message = \"请求较慢 / 失败，请重试\";\n    }\n    java.toast(message);\n}\n\nfunction Comment() {\n    var original = JSON.parse(source.getVariable());\n    var newStatus = original.Comment == \"开启\" ? \"关闭\" : \"开启\";\n    original.Comment = newStatus;\n    source.setVariable(JSON.stringify(original));\n    java.toast(\"\\n书评\\n\" + (newStatus == \"开启\" ? \"关闭\" : \"开启\") + \"→\" + newStatus);\n}\n\nfunction LoginOut() {\n    cookie.removeCookie(source.key);\n    source.removeLoginHeader();\n    java.toast('登出成功');\n}\n\nfunction Word(z) {\n    let wordList = [\n        [\"全部\", \"0_1000000000\"],\n        [\"＜30万\", \"0_300000\"],\n        [\"30-50万\", \"300000_500000\"],\n        [\"50-100万\", \"500000_1000000\"],\n        [\"100-200万\", \"1000000_2000000\"],\n        [\"＞200万\", \"2000000_1000000000\"]\n    ];\n    let original = JSON.parse(source.getVariable());\n    let mySelect = original.wordNumber;\n    let text;\n    if (mySelect == wordList[z][1]) {\n        text = `\\n重复选择\\n当前【${wordList[z][0]}】`;\n    } else {\n        original.wordNumber = wordList[z][1];\n        source.setVariable(JSON.stringify(original));\n        text = `\\n已选择\\n【${wordList[z][0]}】`;\n    }\n    java.toast(text);\n}\n\nfunction PrintInfo() {\n    if (!source.getLoginHeader() && Login_check()) return java.toast('未登录');\n    let url = source.key;\n    let info = \"\";\n    info += \"\\n用户邀请码：\" + java.get(`${url}/api/user/getCode`, {\n        \"Authorization\": mn(`${url}/api/user/getCode`, \"GET\")\n    }).body();\n    info += \"\\n用户当前积分：\" + java.get(`${url}/api/user/getPoint`, {\n        \"Authorization\": mn(`${url}/api/user/getPoint`, \"GET\")\n    }).body();\n    java.log(info);\n    java.longToast(info + \"\\n信息已打印至源日志\");\n}\n\nfunction blockTags(u) {\n    try {\n        let key = result?.[\"请输入标签（一次一个）\"] || null;\n        key = key == \"\" ? null : key;\n        if (!key && u) return java.toast('未填写标签'); \n        let tags = getTagList(key, u);\n        if (tags.length == 0) return;\n        let data = java.startBrowserAwait(\"data:text/html;base64,\" + mydislikeTag(tags), \"选取\", false).body();\n        let List = org.jsoup.Jsoup.parse(data).select('#change').attr('href').trim().split(',').filter(i => i != \"\");\n        if (List.length == 0) return java.toast('未选择');\n        let message = (u ? \"已屏蔽：\" : \"已解除屏蔽：\") + List.map(e => {\n            let tag = String(e).split('|');\n            let url = `${source.key}/api/tag-filters/filterTag/${tag[1]}`;\n            java.get(url, {\n                \"Authorization\": mn(url, \"GET\")\n            });\n            //java.log(url);\n            return tag[0];\n        }).join(';');\n        java.toast(message);\n    } catch (e) {\n        java.log(\"😁\" + e)\n    }\n    result[\"请输入标签（一次一个）\"] = \"\";\n    source.putLoginInfo(JSON.stringify(result));\n}",
    "respondTime": 180000,
    "ruleBookInfo": {
      "coverUrl": "$.trueId\n@js:\n//获取novelpia站的原始封面，会导致加载略慢\n//java.log(result);\nif (result !== \"\") {\nimgsr = java.ajax('https://novelpia.com/novel/' + result);\nresult = String(imgsr).match(/[^\"]+\\/imagebox\\/cover\\/[^\"]+/)[0];\n}\nresult;",
      "init": "@js:\nvar sr = JSON.parse(src);\nvar bookUrl = java.base64Decode(baseUrl.split(',')[1]);\nvar tags = \"收藏数：\" + sr.up + \",\";\nvar bookid = bookUrl.match(/\\/(\\d+).*?$/)[1];\nvar sourceInfo = source.getLoginInfoMap();\nsourceInfo[\"书籍ID（拉取更新）\"] = bookid;\nsource.putLoginInfo(JSON.stringify(sourceInfo));\ntags += JSON.parse(java.get(`${source.key}/api/tag/getTagsByNovelId/${bookid}`, {\n    \"Authorization\": mn(`${source.key}/api/tag/getTagsByNovelId/${bookid}`, \"GET\")\n}).body()).join(\",\");\nvar CollectCheck = java.get(`${source.key}/api/favorites/user/${bookid}/novelPia`, {\n    \"Authorization\": mn(`${source.key}/api/favorites/user/${bookid}/novelPia`, \"GET\")\n}).body() == \"true\" ? \"已收藏,\" : \"\";\nvar collecturl = source.key + \"/api/favoriteGroups/getAllFavoriteGroups\";\nvar collect = JSON.parse(java.get(collecturl, {\n    \"Authorization\": mn(collecturl, \"GET\")\n}).body());\n\nfunction createFavoriteGroup(name) {\n    const url = `${source.key}/api/favoriteGroups/createFavoriteGroup?name=${name}`;\n    const res = JSON.parse(java.post(url, \"\", {\n        \"Authorization\": mn(url, \"POST\")\n    }).body());\n    return res.id;\n}\n\nconst customVar = book.getVariable(\"custom\");\nif (customVar.includes(\"@\")) {\n    const [groupName, action] = customVar.split(\"@\");\n    let Base_url, text;\n    if (!customVar.startsWith(\"@\") && action == \"添加\") {\n        const favoriteGroup = collect.find(obj => obj.name == groupName);\n        const groupId = favoriteGroup ? favoriteGroup.id : createFavoriteGroup(groupName);\n        Base_url = `${source.key}/api/novels/${bookid}/up/novelPia/${groupId}`;\n        text = `\\n书籍已添加至【${groupName}】分组`;\n        CollectCheck = \"已收藏,\";\n    } else {\n        Base_url = `${source.key}/api/novels/${bookid}/down/novelPia/0`;\n        CollectCheck = \"\";\n        text = \"书籍已从收藏移除\";\n    }\n\n    OkhttpPut(Base_url, {\n        \"Authorization\": mn(Base_url, \"PUT\")\n    });\n    book.putCustomVariable(\"\");\n    java.toast(text);\n} else if (customVar != \"\") {\n    java.toast('格式错误');\n    book.putCustomVariable(\"\");\n}\nresult = {\n\t   \"name\": sr.title, \n\t   \"bookid\": bookid,\n    \"tags\": CollectCheck + tags + (sr?.spans.replace(/\\s/g, \"\").replace(/^/, \",\") || \"\"),\n    \"info\": `原名：${sr.trueName}\\n用户收藏分组：\\n` + collect.map(item => item.name).join('\\n'),\n    \"trueId\": sr.trueId,\n    \"wordcount\": sr.fontNumber,\n    \"tocurl\": source.key + \"/api/chapters/getChaptersByNovelId/\" + bookid\n};\nJSON.stringify(result);",
      "intro": "$.info\n@js:\n//书评处理\nconst bookid = JSON.parse(src).bookid;\nif (JSON.parse(source.getVariable()).Comment === \"开启\") {\n    let Content = \"\";\n    for (let i = 0;; i++) {\n        var CommentData = JSON.parse(java.get(`${source.key}/api/posts/getAllPostsByNovelId?novelId=${bookid}&page=${i}&size=5&sortBy=commentNum&sortDirection=desc`, {\n            \"Authorization\": mn(`${source.key}/api/posts/getAllPostsByNovelId?novelId=${bookid}&page=${i}&size=5&sortBy=commentNum&sortDirection=desc`, \"GET\")\n        }).body()).content;\n        if (CommentData.length === 0) break;\n        //java.log(JSON.stringify(CommentData, null, \"\\t\"))\n        for (let e of CommentData) {\n        let commentUrl = `${source.key}/api/posts/${e.id}/comments`;\n        let commentData = JSON.parse(java.get(commentUrl, {\n                \"Authorization\": mn(commentUrl, \"GET\")\n            }).body());\n            Content += `┌─🪧标题：${e.title}\\n│┌👤：${e.author} | ID：${e.userId} | ${formatDate(e.createdAt)}\\n` + (commentData.length == 0 ? \"└─\" : \"│└\") + `评论：${e.content}\\n`;\n            Content += commentData.map((comment, index) => `│├👤：${comment.username} | ID：${comment.userId} | ${formatDate(comment.createdAt)}\\n` + (index + 1 == commentData.length ? \"└─\" : \"│└\") + `评论：${comment.content}`).join('\\n');\n            Content += \"\\n\";\n        }\n    }\n    result += \"\\n\" + \"✏️书评：\\n\" + (Content || \"📖本书暂无书评\");\n}\nresult;",
      "kind": "$.tags",
      "name": "$.name",
      "tocUrl": "$.tocurl\n@js:\nresult = `data:;base64,${java.base64Encode(result)},{\"type\":\"Toc\"}`;\nresult;",
      "wordCount": "$.wordcount"
    },
    "ruleContent": {
      "content": "@js:\nlet content;\nif (source.getLoginHeader()) {\n    let encryptText = JSON.parse(src).content;\n    content = decryptData(encryptText).replaceAll(/<img[^>]*src=\"([^\"]+)\"[^>]*>/g, '<img src=\"$1\">');\n} else {\n    content = \"未登录\";\n}\ncontent;",
      "imageStyle": "DEFAULT",
      "replaceRegex": "##(?m)[0-9a-zA-Z+/]+={0,2}$|^\\**封面折叠\\**\\n"
    },
    "ruleExplore": {},
    "ruleSearch": {
      "bookList": "$.content[*]\n@js:\nif (/\\/favorites\\//.test(baseUrl)) {\n    result = java.getElement('$[*]');\n}\nresult;",
      "bookUrl": "{{source.key}}/api/novels/{{$.objectId||$.id}}\n@js:\nresult = `data:;base64,${java.base64Encode(result)},{\"type\":\"book\"}`;",
      "intro": "原名：{{$.trueName}}",
      "kind": "{{$.novelType}}\n{{$.up##\\d+##收藏：$0###}}",
      "name": "$.objectName||$.title",
      "wordCount": "$.fontNumber"
    },
    "ruleToc": {
      "chapterList": "$[*]",
      "chapterName": "第{{$.chapterNumber}}章 {{$.title}}",
      "chapterUrl": "{{source.key}}/api/chapters/{{$.id}}\n@js: `data:;base64,${java.base64Encode(result)},{\"type\":\"chapter\"}`",
      "updateTime": "$.updatedAt\n@js:formatDate(result);"
    },
    "searchUrl": "@js:\neval(String(source.loginUrl));\nvar ul = `${source.key}/api/novels/searchByKeyWord?keyword=${key}`;\nvar headers = mn(ul,\"GET\");\nresult = ul +\",\"+ JSON.stringify({\n  \"headers\": {\"Authorization\":headers}\n});\nresult;",
    "variableComment": "通过书籍变量将书籍加入书架→网站\n⚠️格式应如下：\n添加：分组名@添加\n移除：@移除\n不存在的分组会自动创建后添加",
    "weight": 0
  }
]