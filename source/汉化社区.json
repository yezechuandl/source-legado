[
  {
    "bookSourceComment": "//25.04.25 \n//Authorization头处理 ◎夜泽川◎\n//2025.5.7 修复发现，解密正文。 ◎夜泽川◎",
    "bookSourceGroup": "轻小说",
    "bookSourceName": "汉化社区",
    "bookSourceType": 0,
    "bookSourceUrl": "https://freenovel.sbs",
    "customOrder": 316,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\neval(String(source.loginUrl));\nvar result = [];\nvar push = (title, Url, size, parame) => {\n    result.push({\n        title: title,\n        url: typeof Url === \"number\" ? `@js:function buildingUrL(url, pages, id, platform) {\n    let body = {\n        \"platform\": platform,\n        \"tabIds\": id,\n        \"fontNumber\": JSON.parse(source.getVariable()).wordNumber,\n        \"page\": pages - 1,\n        \"size\": 30\n    };\n    \n    let headers = {\n        \"Authorization\": mn(url, \"POST\", body),\n        \"Content-Type\": \"application/json\"\n    };\n    \n    let result = url + \",\" + JSON.stringify({\n        \"body\": JSON.stringify(body),\n        \"headers\": headers,\n        \"method\": \"POST\"\n    });\n    \n    return result;\n}\nbuildingUrL(source.key + \"/api/novels/getNovelsByPlatform\",page,${Url},\"${parame}\");` : Url,\n        style: {\n            layout_flexGrow: 1,\n            layout_flexBasisPercent: size\n        }\n    });\n}\nif (source.getLoginHeader()) {\n\t  //登录检查\n\t  var login_check = source.key + \"/api/auth/isLogin\";\n\t  if (java.get(login_check,{\n        \"Authorization\": mn(login_check, \"GET\")\n    }).body() != \"true\") {\n    Login();\n    }\n\t  push(\"我的收藏\", null, 1);\n\t  var collecturl = source.key + \"/api/favoriteGroups/getAllFavoriteGroups\";\n\t  var collect = JSON.parse(java.get(collecturl,{\n        \"Authorization\": mn(collecturl, \"GET\")\n    }).body()).forEach(item => {\n    let url = `@js:if (page === 1) {\n    let collect_url = source.key + \"/api/favorites/user/group/${item.id}\";\n    collect_url += \",\" + JSON.stringify({\n        \"headers\": {\n        \"Authorization\": mn(collect_url, \"GET\")\n    },\n        \"method\": \"GET\"\n    });}`;\n    push(item.name, url, 0.45);\n});\n    push(\"书库分类\", null, 1);\n    var T = [\"novelPia\",\"upload\"];\n  for (let i of T) {\n\t  push(`>>> ${i} 库<<<`, null, 1);\n    var T_url = source.key + \"/api/tag/all/\" + i;\n    var T_header = {\n        \"Authorization\": mn(T_url, \"GET\")\n    };\n    var tagArry = JSON.parse(java.get(T_url, T_header).body());\n    if (i === \"upload\") tagArry.unshift({\"id\":0,\"name\":\"全部\"});\n    tagArry.forEach((item, index) => {\n        let tagNumber = JSON.parse(source.getVariable()).tagNumber;\n        let range = tagNumber == \"全部\" ? tagArry.length : tagNumber;\n        if (index <= range) {\n            let size = item.id == 0 ? 1 : 0.25;\n            push(item.name, item.id, size, i);\n        }\n    });\n   }\n} else {\n    push(\"未登录\", null, 1);\n}\nJSON.stringify(result);",
    "header": "<js>\nJSON.stringify({\n  'User-Agent': \"Mozilla/5.0 (Linux; Android 15; V2304A Build/AP3A.240905.015.A2; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/126.0.6478.71 Mobile Safari/537.36\",\n'Content-Type': \"application/json\"\n})\n</js>",
    "jsLib": "function wn(t) {\n                return \"object\" !== typeof t || null === t ? t :\n                    Array.isArray(t) ? t.map(wn) : Object.keys(t)\n                    .sort().reduce(((e, n) => (e[n] = wn(t[n]),\n                    e)), {})\n}\n\nfunction mn(u, i, b) {\n\t const { java , source } = this\n\t let result;\n\t if (source.getLoginHeaderMap()) {\n  const e = source.getLoginHeaderMap().get(\"Authorization\");\n  const n = Date.now();\n  const base64String = java.base64Encode(n + u + e);\n  const r = java.md5Encode(base64String);\n\t const l = java.toURL(u).searchParams ? wn(Object.fromEntries(Array.from(java.toURL(u).searchParams).map(([k, v]) => [k, String(v)]))) : {};\n  const s = java.toURL(u).pathname;\n  const g = b ? wn(b) : {};\n  const h = [i,s,JSON.stringify(l),JSON.stringify(g),n,r].join(\"|\");\n  //java.log(h);\n  let key = java.HMacHex(h, \"HmacSHA256\", e);\n  result = String(`${e};${key};${n};${r}`);\n } else {\n \t java.toast('未登录');\n \t result = \"\";\n \t}\n return result;\n}\n\nfunction formatDate(dateStr) {\n  const date = new Date(dateStr);\n  const pad = n => String(n).padStart(2, '0');\n  return `${date.getFullYear()}-${pad(date.getMonth()+1)}-${pad(date.getDate())} ` +\n         `${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;\n}\n\nfunction decryptData(Data, userkey) {\n\t      const { java } = this \n    try {\n        const fullData = java.base64DecodeToByteArray(Data);\n        const ivBytes = fullData.slice(0, 16);\n        const ContentBytes = fullData.slice(16);\n        \n        const keyTime = 60000 * Math.floor(Date.now() / 60000);\n        const keyTimes = [keyTime, keyTime - 60000, keyTime - 60000*2];\n        //java.log(keyTimes.toString());\n        \n        for (let ks of keyTimes) {\n            try {\n                let keyHex = java.digestHex(userkey + ks, \"SHA-256\");\n                let keyBytes = java.hexDecodeToByteArray(keyHex);\n                \n                let cipher = java.createSymmetricCrypto(\n                    \"AES/CBC/PKCS7Padding\",\n                    keyBytes,\n                    ivBytes\n                );\n                \n                let content = cipher.decryptStr(ContentBytes);\n                //java.log(content);\n                if (content) {\n                \treturn String(content);\n                \t}\n            } catch(e) {\n                java.log(`使用【${ks}】拼接密匙，解密失败\\n` +  e);\n            }\n        }\n        throw new Error(\"所有密钥失效\");\n    } catch(e) {\n        throw new Error(`解密过程出错: \\n${e}`);\n    }\n}\n\nvar javaImport = new JavaImporter();\njavaImport.importPackage(\n    Packages.okhttp3\n);\n//构建Put请求函数;\nfunction OkhttpPut(url, headers) {\n        const { java } = this\n        with(javaImport) {\n        var body = RequestBody.create(null, \"\");\n        \n        var requestBuilder = new Request.Builder()\n            .url(url)\n            .put(body);\n\n        if (headers) {\n            for (let key in headers) {\n                requestBuilder.addHeader(key, headers[key]);\n            }\n        }\n\n        //java.log(\"PUT: \" + url + ',{\"headers\":' + JSON.stringify(headers) + \"}\");\n        \n        let client = new OkHttpClient();\n        let response = client.newCall(requestBuilder.build()).execute();\n        let ResponseBody = response.body().string();\n        if (ResponseBody.includes('Invalid signature')) {\n        throw new Error(\"用户Authorization头过期，请检验登录状态\");\n        }\n        return JSON.parse(ResponseBody);\n    }\n}",
    "lastUpdateTime": 1748349150441,
    "loginCheckJs": "if (source.getLoginHeaderMap() && result.body().includes('Invalid signature')) {\n\t eval(String(source.loginUrl));\n\t\tLogin();\n}\nresult;",
    "loginUi": "[\n   {\n    \"name\": \"用户名\",\n    \"type\": \"text\"\n    }, \n    {\n    \"name\": \"密码\",\n    \"type\": \"password\"\n    }, \n    {\n    \"name\": \"邀请码\",\n    \"type\": \"text\"\n    }, \n    {\n    \"name\": \"登录\",\n    \"type\": \"button\",\n    \"action\": \"Login(true)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    }, \n    {\n    \"name\": \" 登出 \",\n    \"type\": \"button\",\n    \"action\": \"LoginOut()\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    }, \n    {\n    \"name\": \" 打印用户信息 \",\n    \"type\": \"button\",\n    \"action\": \"PrintInfo()\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 1\n        }\n    }, \n    {\n    \"name\": \"发现标签展示最大数目（默认36）\",\n    \"type\": \"text\"\n     },\n     {\n    \"name\": \" 字数过滤 \",\n    \"type\": \"button\",\n    \"action\": \"\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n    \"name\": \" 全部 \",\n    \"type\": \"button\",\n    \"action\": \"Word(0)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" ＜30万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(1)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" 30-50万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(2)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" 50-100万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(3)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" 100-200万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(4)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n    \"name\": \" ＞200万字 \",\n    \"type\": \"button\",\n    \"action\": \"Word(5)\",\n    \"style\": {\n        \"layout_flexGrow\": 1,\n        \"layout_flexBasisPercent\": 0.45\n        }\n    }\n]",
    "loginUrl": "if (source.getVariable() == \"\") {\n    let original = {\n        \"wordNumber\": \"0_1000000000\",\n        \"tagNumber\": \"36\"\n    };\n    source.setVariable(JSON.stringify(original));\n    java.toast('已初始化自定义数据');\n}\n\nfunction login() {\n    let Str = source.getLoginInfoMap()?.get(\"发现标签展示最大数目（默认36）\") ?? \"\";\n    let original = JSON.parse(source.getVariable());\n    if (/^\\d+$/.test(Str) || Str == \"全部\") {\n        original.tagNumber = Str;\n    } else {\n        original.tagNumber = \"36\";\n    }\n    source.setVariable(JSON.stringify(original));\n}\n\nfunction Login(c) {\n    cookie.removeCookie(source.key);\n    var name = source.getLoginInfoMap()?.get(\"用户名\") ?? \"\";\n    var word = source.getLoginInfoMap()?.get(\"密码\") ?? \"\";\n    var invitationCode = source.getLoginInfoMap()?.get(\"邀请码\") ?? \"\";\n    let so = source.key;\n    if (String(name) !== \"\" && String(word) !== \"\") {\n        let url = so + \"/api/auth/login\";\n        let body = {\n            \"email\": name,\n            \"password\": word,\n            \"invitationCode\": invitationCode\n        };\n        let parame = JSON.stringify({\n            \"body\": JSON.stringify(body),\n            \"method\": \"POST\"\n        });\n        let Data = java.ajax(url + \",\" + parame);\n        let UserData = {\n            \"Authorization\": Data\n        };\n        if (/^\\w/.test(Data)) {\n            let message = c ? `\\n用户${name}\\n登录成功` : \"\\n登录掉啦，已重新获取登录Authorization头\";\n            java.toast(message);\n            source.putLoginHeader(JSON.stringify(UserData));\n        } else {\n            java.toast(Data);\n        }\n    } else {\n        java.toast(\"请填入必要数据后点击右上角√\");\n    }\n}\n\nfunction LoginOut() {\n    cookie.removeCookie(source.key);\n    source.removeLoginHeader();\n    java.toast('登出成功');\n}\n\nfunction Word(z) {\n    let wordList = [\n        [\"全部\", \"0_1000000000\"],\n        [\"＜30万\", \"0_300000\"],\n        [\"30-50万\", \"300000_500000\"],\n        [\"50-100万\", \"500000_1000000\"],\n        [\"100-200万\", \"1000000_2000000\"],\n        [\"＞200万\", \"2000000_1000000000\"]\n    ];\n    let original = JSON.parse(source.getVariable());\n    let mySelect = original.wordNumber;\n    let text;\n    if (mySelect == wordList[z][1]) {\n        text = `\\n重复选择\\n当前【${wordList[z][0]}】`;\n    } else {\n        original.wordNumber = wordList[z][1];\n        source.setVariable(JSON.stringify(original));\n        text = `\\n已选择\\n【${wordList[z][0]}】`;\n    }\n    java.toast(text);\n}\n\nfunction PrintInfo() {\n\t   if (source.getLoginHeaderMap()) {\n\t   \tlet url = source.key;\n     let info = \"\";\n     info += \"\\n用户邀请码：\" + java.get(`${url}/api/user/getCode`,{\"Authorization\": mn(`${url}/api/user/getCode`,\"GET\")}).body();\n     info += \"\\n用户当前积分：\" + java.get(`${url}/api/user/getPoint`,{\"Authorization\": mn(`${url}/api/user/getPoint`,\"GET\")}).body();\n     java.log(info);\n     java.longToast(info + \"\\n信息已打印至源日志\");\n     } else { \n     \tjava.toast(\"未登录\"); \n   }\n}",
    "respondTime": 180000,
    "ruleBookInfo": {
      "init": "@js:\nvar tags = JSON.parse(result).join(\",\");\nvar bookid = baseUrl.match(/\\/(\\d+).*?$/)[1];\nvar CollectCheck = java.get(`${source.key}/api/favorites/user/${bookid}/novelPia`, {\n    \"Authorization\": mn(`${source.key}/api/favorites/user/${bookid}/novelPia`, \"GET\")\n}).body() == \"true\" ? \"已收藏,\" : \"\";\nvar collecturl = source.key + \"/api/favoriteGroups/getAllFavoriteGroups\";\nvar collect = JSON.parse(java.get(collecturl, {\n    \"Authorization\": mn(collecturl, \"GET\")\n}).body());\n\nfunction createFavoriteGroup(name) {\n    const url = `${source.key}/api/favoriteGroups/createFavoriteGroup?name=${name}`;\n    const res = JSON.parse(java.post(url, \"\", { \"Authorization\": mn(url, \"POST\") }).body());\n    return res.id;\n}\n\nconst customVar = book.getVariable(\"custom\");\nif (customVar.includes(\"@\")) {\n    const [groupName, action] = customVar.split(\"@\");\n    let Base_url, text;\n    if (!customVar.startsWith(\"@\") && action == \"添加\") {\n        const favoriteGroup = collect.find(obj => obj.name == groupName);\n        const groupId = favoriteGroup ? favoriteGroup.id : createFavoriteGroup(groupName);\n        Base_url = `${source.key}/api/novels/${bookid}/up/novelPia/${groupId}`;\n        text = `\\n书籍已添加至【${groupName}】分组`;\n        CollectCheck = \"已收藏,\";\n    } else {\n        Base_url = `${source.key}/api/novels/${bookid}/down/novelPia/0`;\n        CollectCheck = \"\";\n        text = \"书籍已从收藏移除\";\n    }\n\n    OkhttpPut(Base_url, { \"Authorization\": mn(Base_url, \"PUT\") });\n    book.putCustomVariable(\"\");\n    java.toast(text);\n} else if (customVar != \"\") {\n    java.toast('格式错误');\n    book.putCustomVariable(\"\");\n}\nresult = {\n    \"tags\": CollectCheck + tags,\n    \"info\": \"用户收藏分组：\\n\" + collect.map(item => item.name).join('\\n') + \"\\n⚠️格式应如下：\\n添加：分组名@添加\\n移除：@移除\\n不存在的分组会自动创建后添加\",\n    \"tocurl\": source.key + \"/api/chapters/getChaptersByNovelId/\" + bookid\n};\nJSON.stringify(result);",
      "intro": "$.info",
      "kind": "$.tags",
      "tocUrl": "$.tocurl\n@js:var headers = mn(result,\"GET\");\nresult = result +\",\"+ JSON.stringify({\n  \"headers\": {\"Authorization\":headers}\n})"
    },
    "ruleContent": {
      "content": "@js: \nvar base_ = java.hexDecodeToString(result);\n//java.log(base_);\nvar authorization = source.getLoginHeaderMap()?.get(\"Authorization\") ?? null;\nlet content;\nif (authorization) {\n    let encryptText = JSON.parse(java.get(base_, {\n        \"Authorization\": mn(base_, \"GET\")\n    }).body()).content;\n    content = decryptData(encryptText, authorization).replaceAll(/<img[^>]*src=\"([^\"]+)\"[^>]*>/g, '<img src=\"$1\">');\n} else {\n    content = \"未登录\";\n}\ncontent;",
      "imageStyle": "DEFAULT",
      "replaceRegex": "##(?m)[0-9a-zA-Z+/]+={0,2}$|^封面折叠\\n"
    },
    "ruleExplore": {},
    "ruleSearch": {
      "bookList": "$.content[*]\n@js:\nif (/\\/favorites\\//.test(baseUrl)) {\n    result = java.getElement('$.[*]');\n}\nresult;",
      "bookUrl": "{{source.key}}/api/tag/getTagsByNovelId/{{$.objectId||$.id}}\n@js:var headers = mn(result,\"GET\");\nresult = result +\",\"+ JSON.stringify({\n  \"headers\": {\"Authorization\":headers}\n})",
      "intro": "原名：{{$.trueName}}",
      "kind": "{{$.novelType}}\n收藏{{$.up}}",
      "name": "$.objectName||$.title",
      "wordCount": "$.fontNumber"
    },
    "ruleToc": {
      "chapterList": "$.[*]",
      "chapterName": "第{{$.chapterNumber}}章 {{$.title}}",
      "chapterUrl": "{{source.key}}/api/chapters/{{$.id}}\n@js: `data:;base64,${java.base64Encode(result)},{\"type\":\"novel\"}`",
      "updateTime": "$.updatedAt\n@js:formatDate(result);"
    },
    "searchUrl": "@js:\neval(String(source.loginUrl));\nvar ul = `${source.key}/api/novels/searchByKeyWord?keyword=${key}`;\nvar headers = mn(ul,\"GET\");\nresult = ul +\",\"+ JSON.stringify({\n  \"headers\": {\"Authorization\":headers}\n});",
    "weight": 0
  }
]