[
  {
    "bookSourceComment": "//2025.7.23 发现新增自定义标签🏷️ ◎夜泽川◎\n//2025.7.10 修复搜索，排序可作用与搜索 ◎夜泽川◎\n //2025.6.27 修复接口获取 ◎夜泽川◎\n//2025.6.4 新增邀请码获取 ◎夜泽川◎\n//2025.5.8 切换接口自动替换本地书架书籍链接。 ◎夜泽川◎\n//2025.4.19 发现静默检测更新，添加评论区开关。 ◎夜泽川◎\n//2025.4.12 修复排序切换，优化部分规则。◎夜泽川◎\n//2025.4.11 剔除一个默认接口，修复默认接口的登录问题。 ◎夜泽川◎\n//2025.4.3 修复评论数据异常无法处理的问题，新增一个默认接口。 ◎夜泽川◎\n//2025.3.21 优化接口获取 ◎夜泽川◎\n//2025.3.16 添加发现分类排序选择 ◎夜泽川◎\n//2025.3.8 切换接口重新设置登陆cookie ◎夜泽川◎\n//2025.3.7 重构书源，增加接口选择。◎夜泽川◎\n//2025.3.6 本地书架变更为添加时间排序 ◎夜泽川◎\n//2025.3.5 “我的书评”改为uid精准匹配。◎夜泽川◎\n//2025.3.2 优化正文，限制预下载 ◎夜泽川◎\n//2025.3.1 优化发现及正文 ◎夜泽川◎\n//2025.2.28 优化书评展示及发送，修复已知问题 ◎夜泽川◎\n//2025.2.27 更正登录信息展示 \n//2025.2.26 新增书评展示。（其实也没多少评论） ◎夜泽川◎\n//2025.2.23 处理正文文本获取时可能出现的错误。（三次试错）◎夜泽川◎\n//2025.2.22 加入本地书架功能（与阅读书架隔离），网络书架的替代品（因为经验值），未注册用户也可使用。\n（实验性功能，不建议加入过多，可能会出现未知问题，用之前记得备份好🧐）\n//2025.2.17 处理网络书架翻页的相关问题 ◎夜泽川◎\n//2025.2.16 优化发现 ◎夜泽川◎\n//2025.2.13 新增书源更新检测，根据书源编辑时间戳判断，修改源会导致判断错误。◎夜泽川◎\n//2025.2.12 新增网络书架处理（仅登录用户）,动态获取发现。◎夜泽川◎\n//2025.2.9 自动处理正文验证。◎夜泽川◎\n//2025.1.26 修复登录函数中与阅读内置变量冲突。◎夜泽川◎\n//2025.1.24 优化登录规则 ◎夜泽川◎//2024.7.26 ◎夜泽川◎\n//搜索和发现需要封面可复制规则到相应位置，因为封面是从详情取的，所以可能会导致加载变慢甚至超时，自行斟酌。↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\na@href\n<js>\nul = GetUL() + result;\njava.ajax(ul);\n</js>\n[property$=image]@content",
    "bookSourceGroup": "自制,零",
    "bookSourceName": "®️爱丽丝书屋",
    "bookSourceType": 0,
    "bookSourceUrl": "爱丽丝书屋 by.夜泽川",
    "bookUrlPattern": "https?:\\/\\/.*?(xnxnxn|alicesw|爱丽丝).*?\\.(org|xyz|com|sbs)\\/novel\\/\\d+\\.html",
    "customOrder": 175,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "@js:\neval(String(source.loginUrl));\nvar timestamp = new Date().getTime();\nvar uptime = cache.get(\"uptime\");\nif (!uptime) {\n    update(\"发现\");\n    cache.put(\"uptime\", (timestamp + 21600000).toString());\n} else if (timestamp >= Number(uptime)) {\n    update(\"发现\");\n    cache.delete(\"uptime\");\n    cache.put(\"uptime\", (timestamp + 21600000).toString());\n}\nlet Cookie = cookie.getCookie(GetUL());\nif (!/lf_user_auth/.test(Cookie) && source.getLoginHeader()) {\n    let ck = source.getLoginHeaderMap()['Cookie']\n    cookie.setCookie(GetUL(), ck);\n    java.toast('登录状态掉了，已重新登陆');\n}\nvar result = [];\nvar headers = JSON.stringify({\"headers\":{\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.171 Safari/537.36\"}});\nvar push = (title, url, size) =>\n    result.push({\n        title: title,\n        url: url ? `{{GetUL()}}${url},` + headers : url,\n        style: {\n            layout_flexGrow: 1,\n            layout_flexBasisPercent: size\n        }\n    });\npush(`当前站源：${GetUL()}`, null, 1)\nif (source.getLoginHeader()) {\n    let jc = source.getLoginHeaderMap();\n    let inf = decodeURIComponent(jc.get(\"Cookie\"));\n    let info = decodeURIComponent(inf).match(/\\{[\\s\\S]+\\}/)[0];\n    let username = JSON.parse(info)['username'];\n    let expe = java.ajax(`${GetUL()}/user/index/index.html`);\n    let ex = org.jsoup.Jsoup.parse(expe).select('.group , .app_accountBlock_lis ul li');\n    push(`用户◎${username}◎中心`, null, 1);\n    push(\"书架\", \"/user/bookshelf?page={{page}}\", 0.45);\n    push(\"阅读记录\", \"/user/recentread/index.html\", 0.45);\n    ex.forEach(xp => {\n        nam = String(xp.text()).replace(/[^\\u4e00-\\u9fa5a-zA-Z0-9]/g, \"\");\n        title = /\\d/.test(nam) ? nam.replace(/\\d+/, \"：$&\") : nam.replace(/^/, \"用户等级：\");\n        push(title, null, 0.45);\n    });\n} else {\n    push(\"未登录\", null, 1);\n}\npush(\"--------书库--------\", null, 1);\npush(\"最近更新\", \"/all{{Sort_()}}.html\", 0.45);\npush(\"原创\", \"/original.html?page={{page}}\", 0.45);\npush(\"排行\", null, 1);\nvar src = java.ajax(`${GetUL()}/all/order/hits+desc.html`);\nvar ph = org.jsoup.Jsoup.parse(src).select('.paihang_ds a');\nph.forEach(ta => {\n    nam = ta.text();\n    ul = ta.attr('href')\n    push(nam, ul, 0.45);\n})\npush(\"分类\", null, 1);\nvar tag = org.jsoup.Jsoup.parse(src).select('.fenlei_ds a');\ntag.forEach(ta => {\n    nam = ta.text();\n    ul = String(ta.attr('href')).replace(/$/, \"?page={{page}}\").replace(/lists/, \"all/id\").replace(/\\.html/, `{{Sort_()}}$&`);\n    push(nam, ul, 0.25);\n})\nif (source.getLoginInfoMap()?.[\"发现自定义标签🏷️（中 / 英逗号分隔）\"] != \"\") {\n\t   push(\"自定义标签🏷️\", null, 1);\n\t   let myTags = String(source.getLoginInfoMap()[\"发现自定义标签🏷️（中 / 英逗号分隔）\"]).split(/[,，]/);\n\t   myTags.forEach(tag => {\n\t   \tlet url = `/search.html?q=${tag}&f=tag&sort={{Sort_('search')}}&p={{page}}&serialize=`;\n\t   \tpush(tag, url, 0.25);\n\t   \t});\n}\nJSON.stringify(result);",
    "header": "{\"User-Agent\": \"Mozilla/5.0 (Linux; Android 9) Mobile Safari/537.36\"}",
    "jsLib": "nk = \"PGh0bWw+CjxoZWFkPgogICAgPG1ldGEgaHR0cC1lcXVpdj0icmVmcmVzaCIgY29udGVudD0iMDt1cmw9bGVnYWRvOi8vaW1wb3J0L1NvdXJjZT9zcmM9aHR0cHM6Ly9mYXN0bHkuanNkZWxpdnIubmV0L2doL3llemVjaHVhbmRsL3NvdXJjZS1sZWdhZG9AbWFpbi9zb3VyY2Uv54ix5Li95Lid5Lmm5bGLLmpzb24iPgogICAgPHN0eWxlPgogICAgICAgIC5ub3RpY2UtYm94IHsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsgLyog5ZCv55SoRmxleGJveOW4g+WxgCAqLwogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHk+CiAgICA8ZGl2IGNsYXNzPSJub3RpY2UtYm94Ij4KICAgICAgICA8cD7oi6Xot7PovazmnKroh6rliqjmiafooYw8YnI+CiAgICAgICAgPGEgaHJlZj0ibGVnYWRvOi8vaW1wb3J0L1NvdXJjZT9zcmM9aHR0cHM6Ly9mYXN0bHkuanNkZWxpdnIubmV0L2doL3llemVjaHVhbmRsL3NvdXJjZS1sZWdhZG9AbWFpbi9zb3VyY2Uv54ix5Li95Lid5Lmm5bGLLmpzb24iPuivt+aJi+WKqOeCueWHu+atpOWkhDwvYT48L3A+CiAgICA8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+\";\n\nfunction Sort_(t) {\n\t   const { source } = this\n    const sgvs = JSON.parse(source.getVariable())?.s || 0;\n    \n    if (!sgvs) return t === 'search' ? 'relevance' : '';\n    const sorts = ['update_time+desc', 'hits+desc', 'word+desc'];\n    const sort = sorts[sgvs - 1];\n    \n    if (t === 'search') {\n        return sort.replace('+', '_');\n    }\n    return '/order/' + sort;\n}\n\nfunction GetUL() {\n\tconst { java, source } = this\n\tlet sourceul = JSON.parse(source.getVariable()).sourl;\n\treturn sourceul;\n}\n\n//计算最终value值\nfunction getval(kk) {\n\t   const { java } = this\n    var val = \"\";\n    for (var i = 0; i <= kk.length - 1; i++) {\n        var str = kk.charAt(i);\n        var code = str.charCodeAt();\n        val += parseInt(code) + 1;\n    }\n    valu = java.md5Encode(val);\n    return valu;\n}\n\nfunction timeov(times) {\n    const date = new Date(times);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n//自定义书架\nfunction booklist() {\n\tconst { java , source } = this\n let all = JSON.parse(source.getVariable()).booklist;\n let list = String(JSON.stringify(all));\n let hm = \"PCFET0NUWVBFIGh0bWw+PGh0bWwgbGFuZz16aC1DTj48aGVhZD48bWV0YSBjaGFyc2V0PVVURi04PjxtZXRhIG5hbWU9dmlld3BvcnQgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLGluaXRpYWwtc2NhbGU9MSI+PHRpdGxlPuacrOWcsOS5puaetjwvdGl0bGU+PHN0eWxlPmJvZHl7bWFyZ2luOjA7cGFkZGluZzoyMHB4O2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sc3lzdGVtLXVpLCJTZWdvZSBVSSIsUm9ib3RvLHNhbnMtc2VyaWY7YmFja2dyb3VuZDojZjVmNWY3fS5jb3JuZXItdGV4dHtwb3NpdGlvbjpmaXhlZDt0b3A6MjBweDtsZWZ0OjIwcHg7Zm9udC1zaXplOi45ZW07Y29sb3I6Izg2ODY4YjtvcGFjaXR5Oi45O3otaW5kZXg6MTAwO2JhY2tncm91bmQ6cmdiYSgyNTUsMjU1LDI1NSwuOCk7cGFkZGluZzo1cHggMTBweDtib3JkZXItcmFkaXVzOjZweDtiYWNrZHJvcC1maWx0ZXI6Ymx1cigycHgpO2JveC1zaGFkb3c6MCAycHggNHB4IHJnYmEoMCwwLDAsLjA1KX0uc2hlbGYtY29udGFpbmVye21heC13aWR0aDoxMjAwcHg7bWFyZ2luOjAgYXV0bztiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyLXJhZGl1czoxOHB4O2JveC1zaGFkb3c6MCA0cHggMTJweCByZ2JhKDAsMCwwLC4xKTtwYWRkaW5nOjMwcHg7cG9zaXRpb246cmVsYXRpdmV9LnNoZWxmLXRpdGxle3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToyLjVyZW07Y29sb3I6IzFkMWQxZjttYXJnaW46MCAwIDMwcHggMDtwYWRkaW5nLWJvdHRvbToyMHB4O2JvcmRlci1ib3R0b206MnB4IHNvbGlkICNmMGYwZjB9LmdyaWR7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoYXV0by1maWxsLG1pbm1heCgyNTBweCwxZnIpKTtnYXA6MjVweDtwYWRkaW5nOjE1cHggMH0uYm9vay1pdGVte2JhY2tncm91bmQ6I2ZmZjtib3JkZXItcmFkaXVzOjEycHg7cGFkZGluZzoxOHB4O2JveC1zaGFkb3c6MCAycHggOHB4IHJnYmEoMCwwLDAsLjA4KTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMnMsYm94LXNoYWRvdyAuMnM7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uYm9vay1pdGVtOmhvdmVye3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0zcHgpO2JveC1zaGFkb3c6MCA0cHggMTZweCByZ2JhKDAsMCwwLC4xMil9LmNvdmVyLWNvbnRhaW5lcnt3aWR0aDoxMDAlO2FzcGVjdC1yYXRpbzozLzQ7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWJvdHRvbToxNXB4fS5jb3Zlci1pbWd7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvYmplY3QtZml0OmNvbnRhaW47Ym9yZGVyLXJhZGl1czo4cHh9LmJvb2stbmFtZXtmb250LXNpemU6MS4xZW07bWFyZ2luOjAgMCA4cHggMDtjb2xvcjojMWQxZDFmO2ZvbnQtd2VpZ2h0OjYwMH0uYm9vay1hdXRob3J7Zm9udC1zaXplOi45ZW07Y29sb3I6IzY2NjttYXJnaW4tYm90dG9tOjEycHh9LmJvb2staW5mb3tmb250LXNpemU6LjllbTtjb2xvcjojODY4NjhiO2xpbmUtaGVpZ2h0OjEuNTtoZWlnaHQ6NC41ZW07b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6LXdlYmtpdC1ib3g7LXdlYmtpdC1saW5lLWNsYW1wOjM7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsO2ZsZXgtZ3JvdzoxfS5jb3B5cmlnaHQtYWxlcnR7cG9zaXRpb246Zml4ZWQ7dG9wOjIwcHg7bGVmdDoyMHB4O3otaW5kZXg6OTk5O2NvbG9yOiNmNDQ7Zm9udC1zaXplOjE4cHg7Zm9udC13ZWlnaHQ6NzAwO2JhY2tncm91bmQ6cmdiYSgyNTUsMjU1LDI1NSwuOSk7cGFkZGluZzo4cHggMTVweDtib3JkZXItcmFkaXVzOjZweDtib3gtc2hhZG93OjAgMnB4IDhweCByZ2JhKDI1NSw2OCw2OCwuMyk7YW5pbWF0aW9uOnNoYWtlIC44cyBlYXNlfUBrZXlmcmFtZXMgc2hha2V7MCUsMTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0yNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTVweCl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDVweCl9fS5zaGVsZi1jb250YWluZXJ7bWF4LXdpZHRoOjEyMDBweDttYXJnaW46MCBhdXRvO2JhY2tncm91bmQ6I2ZmZjtib3JkZXItcmFkaXVzOjE4cHg7Ym94LXNoYWRvdzowIDRweCAxMnB4IHJnYmEoMCwwLDAsLjEpO3BhZGRpbmc6MzBweDttYXJnaW4tdG9wOjUwcHh9PC9zdHlsZT48Ym9keT48ZGl2IGNsYXNzPW9yaWdpbmFsLWF1dGhvcj7mupDkvZzogIXvvJrlpJzms73lt508L2Rpdj48ZGl2IGNsYXNzPXNoZWxmLWNvbnRhaW5lcj48aDEgY2xhc3M9c2hlbGYtdGl0bGU+5pys5Zyw5Lmm5p62PC9oMT48ZGl2IGlkPWJvb2tzaGVsZj48L2Rpdj48L2Rpdj48c2NyaXB0PuKXjuWPguiAg+agh+ivhuKXjgogICAgICAgIGZ1bmN0aW9uIHJlbmRlckJvb2tzaGVsZigpe2NvbnN0IGNvbnRhaW5lcj1kb2N1bWVudFsiZ2V0RWxlbWVudEJ5SWQiXSgnYm9va3NoZWxmJyk7bGV0IGh0bWw9Jyc7aWYobGlzdFsibGVuZ3RoIl09PT0gMCl7aHRtbD0gJzxkaXYgY2xhc3M9XCJlbXB0eS1tZXNzYWdlXCI+XHU2NjgyXHU2NWY2XHU2Y2ExXHU2NzA5XHU0ZTY2XHU3YzRkXHVmZjBjXHU1ZmViXHU1M2JiXHU2ZGZiXHU1MmEwXHU1NDI3XHVmZjAxPC9kaXY+J31lbHNlIHtodG1sPSAnPGRpdiBjbGFzcz1cImdyaWRcIj4nO2xpc3RbInJldmVyc2UiXSgpWyJmb3JFYWNoIl0oKGJvb2spPT57aHRtbCs9ICgiXHgwRFx4MEEgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYm9vay1pdGVtXCI+XHgwRFx4MEEgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvdmVyLWNvbnRhaW5lclwiPlx4MERceDBBICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiIrYm9va1siaW1nIl0rIlwiIGFsdD1cIiIrYm9va1sibmFtZSJdKyJcIiBjbGFzcz1cImNvdmVyLWltZ1wiPlx4MERceDBBICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Plx4MERceDBBICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cImJvb2stbmFtZVwiPiIrYm9va1sibmFtZSJdKyI8L2gzPlx4MERceDBBICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJib29rLWF1dGhvclwiPiIrYm9va1siYXV0aG9yIl0rIjwvZGl2Plx4MERceDBBICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwiYm9vay1pbmZvXCI+Iitib29rWyJpbmZvIl0rIjwvcD5ceDBEXHgwQSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiIitib29rWyJ1cmwiXSsiXCIgY2xhc3M9XCJib29rLWxpbmtcIj5cdTdhY2JcdTUzNzNcdTk2MDVcdThiZmI8L2E+XHgwRFx4MEEgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4iKX0pO2h0bWwrPSAnPC9kaXY+J307Y29udGFpbmVyWyJpbm5lckhUTUwiXT0gaHRtbH1mdW5jdGlvbiBjaGVja0NvcHlyaWdodCgpe2NvbnN0IGF1dGhFbGVtZW50PWRvY3VtZW50WyJxdWVyeVNlbGVjdG9yIl0oJy5vcmlnaW5hbC1hdXRob3InKTtjb25zdCBpc1ZhbGlkPWF1dGhFbGVtZW50JiYgYXV0aEVsZW1lbnRbInRleHRDb250ZW50Il1bInRyaW0iXSgpPT09ICdcdTZlOTBcdTRmNWNcdTgwMDVcdWZmMWFcdTU5MWNcdTZjZmRcdTVkZGQnO2lmKCFpc1ZhbGlkJiYgICFkb2N1bWVudFsicXVlcnlTZWxlY3RvciJdKCcuY29weXJpZ2h0LWFsZXJ0Jykpe2NvbnN0IGFsZXJ0PWRvY3VtZW50WyJjcmVhdGVFbGVtZW50Il0oJ2RpdicpO2FsZXJ0WyJjbGFzc05hbWUiXT0gJ2NvcHlyaWdodC1hbGVydCc7YWxlcnRbInRleHRDb250ZW50Il09ICdcdTk2MzJcdTc2ZDdcdTc1MjhcdTI1Y2VcdTZlOTBcdTRmNWNcdTgwMDVcdTRlM2FcdTU5MWNcdTZjZmRcdTVkZGQnO2RvY3VtZW50WyJib2R5Il1bImFwcGVuZENoaWxkIl0oYWxlcnQpfX13aW5kb3dbImFkZEV2ZW50TGlzdGVuZXIiXSgnRE9NQ29udGVudExvYWRlZCcsKCk9PntyZW5kZXJCb29rc2hlbGYoKTtjaGVja0NvcHlyaWdodCgpO3NldEludGVydmFsKGNoZWNrQ29weXJpZ2h0LDEwMDAwKX0pPC9zY3JpcHQ+\"\n let cc = java.base64Decode(hm);\n let html = String(cc).replace(/◎参考标识◎/,`const list = ${list}`);\n //java.log(html);\nreturn java.base64Encode(html);;\n}\n\ncodesvg = \"PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIAogICAgIHZpZXdCb3g9IjAgMCA3MDAgMjAwIiAKICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJub25lIgogICAgIHN0eWxlPSJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyI+CiAgPHJlY3Qgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSIgZmlsbD0id2hpdGUiLz4KICAKICA8IS0tIOmhtumDqOagh+mimCAtLT4KICA8dGV4dCB4PSI1MCUiIHk9IjQwIiAKICAgICAgICBmb250LXNpemU9IjIwIiAKICAgICAgICBmb250LXdlaWdodD0iYm9sZCIgCiAgICAgICAgdGV4dC1hbmNob3I9Im1pZGRsZSIgCiAgICAgICAgZmlsbD0iIzAwMCI+6YCJ5oup5Y+R6YCB57G75Z6LPC90ZXh0PgogIAogIDwhLS0g6K+E6K665qih5Z2XIC0tPgogIDx0ZXh0IHg9IjI1JSIgeT0iOTAiIAogICAgICAgIGZvbnQtc2l6ZT0iMTYiIAogICAgICAgIGZvbnQtd2VpZ2h0PSJib2xkIiAKICAgICAgICB0ZXh0LWFuY2hvcj0ibWlkZGxlIiAKICAgICAgICBmaWxsPSIjMDAwIj7or4Torro8L3RleHQ+CiAgPHRleHQgeD0iMjUlIiB5PSIxMTAiIAogICAgICAgIGZvbnQtc2l6ZT0iMTQiIAogICAgICAgIGZvbnQtd2VpZ2h0PSJib2xkIiAKICAgICAgICB0ZXh0LWFuY2hvcj0ibWlkZGxlIiAKICAgICAgICBmaWxsPSIjMDAwIj4o5aGr5YaZIuivhOiuuiIpPC90ZXh0PgogIAogIDwhLS0g5Zue5aSN5qih5Z2XIC0tPgogIDx0ZXh0IHg9Ijc1JSIgeT0iOTAiIAogICAgICAgIGZvbnQtc2l6ZT0iMTYiIAogICAgICAgIGZvbnQtd2VpZ2h0PSJib2xkIiAKICAgICAgICB0ZXh0LWFuY2hvcj0ibWlkZGxlIiAKICAgICAgICBmaWxsPSIjMDAwIj7lm57lpI08L3RleHQ+CiAgPHRleHQgeD0iNzUlIiB5PSIxMTAiIAogICAgICAgIGZvbnQtc2l6ZT0iMTQiIAogICAgICAgIGZvbnQtd2VpZ2h0PSJib2xkIiAKICAgICAgICB0ZXh0LWFuY2hvcj0ibWlkZGxlIiAKICAgICAgICBmaWxsPSIjMDAwIj4o5aGr5YaZIkBpZCIpPC90ZXh0PgogIAogIDwhLS0g5bqV6YOo5L+h5oGvIC0tPgogIDx0ZXh0IHg9IjUwJSIgeT0iMTgwIiAKICAgICAgICBmb250LXNpemU9IjE0IiAKICAgICAgICBmb250LXdlaWdodD0iYm9sZCIgCiAgICAgICAgdGV4dC1hbmNob3I9Im1pZGRsZSIgCiAgICAgICAgZmlsbD0iIzAwMCI+5qW85bGCaWTnroDku4vmnIk8L3RleHQ+Cjwvc3ZnPg==\"",
    "lastUpdateTime": 1753527614309,
    "loginUi": "[   \n    {\n        name: \"问题反馈\",\n        type: \"button\",\n        action: \"java.startBrowser('https://github.com/yezechuandl/source-legado','Github');\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.25\n        }\n    },\n    {\n        \"name\": \"更新书源\",\n        \"type\": \"button\",\n        \"action\": \"update()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.25\n        }\n    },\n    {\n        \"name\": \"更新日志\",\n        \"type\": \"button\",\n        \"action\": \"Updatelog()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.25\n        }\n    },\n    {\n        \"name\": \"获取接口\",\n        \"type\": \"button\",\n        \"action\": \"Geturls()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"接口1\",\n        \"type\": \"button\",\n        \"action\": \"Puturl(0)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"接口2\",\n        \"type\": \"button\",\n        \"action\": \"Puturl(1)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"接口3\",\n        \"type\": \"button\",\n        \"action\": \"Puturl(2)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"接口4\",\n        \"type\": \"button\",\n        \"action\": \"Puturl(3)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"用户名/邮箱\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"密码\",\n        \"type\": \"password\"\n    },\n    {\n        \"name\": \"注册\",\n        \"type\": \"button\",\n        \"action\": \"reg()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"登录\",\n        \"type\": \"button\",\n        \"action\": \"Login()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"登出\",\n        \"type\": \"button\",\n        \"action\": \"out()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"信息\",\n        \"type\": \"button\",\n        \"action\": \"show()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"评论展示开 / 关\",\n        \"type\": \"button\",\n        \"action\": \"Comment()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"点击切换分类排序方式\",\n        \"type\": \"button\",\n        \"action\": \"\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"默认\",\n        \"type\": \"button\",\n        \"action\": \"Tgch(0)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"时间\",\n        \"type\": \"button\",\n        \"action\": \"Tgch(1)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"人气\",\n        \"type\": \"button\",\n        \"action\": \"Tgch(2)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"字数\",\n        \"type\": \"button\",\n        \"action\": \"Tgch(3)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"发现自定义标签🏷️（中 / 英逗号分隔）\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"◎↓网络书架↓◎\",\n        \"type\": \"button\",\n        \"action\": \"\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"书籍ID\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"添加网络书架\",\n        \"type\": \"button\",\n        \"action\": \"AFBook(true)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"移除网络书架\",\n        \"type\": \"button\",\n        \"action\": \"AFBook(false)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.45\n        }\n    },\n    {\n        \"name\": \"打开书架\",\n        \"type\": \"button\",\n        \"action\": \"BookShelf()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"◎↓本地书架↓◎\",\n        \"type\": \"button\",\n        \"action\": \"\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"放置\",\n        \"type\": \"button\",\n        \"action\": \"bookinto()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"删除\",\n        \"type\": \"button\",\n        \"action\": \"bookmove('one')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"⚠️清空⚠️\",\n        \"type\": \"button\",\n        \"action\": \"bookmove('all')\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.2\n        }\n    },\n    {\n        \"name\": \"打开本地书架\",\n        \"type\": \"button\",\n        \"action\": \"inBookShelf()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"邀请码【⚠️生成一个需消耗50积分】\",\n        \"type\": \"button\",\n        \"action\": \"\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 1\n        }\n    },\n    {\n        \"name\": \"💡生成邀请码\",\n        \"type\": \"button\",\n        \"action\": \"InvitationCode(true)\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.25\n        }\n    },\n    {\n        \"name\": \"📜打印邀请码\",\n        \"type\": \"button\",\n        \"action\": \"InvitationCode()\",\n        \"style\": {\n            \"layout_flexGrow\": 1,\n            \"layout_flexBasisPercent\": 0.25\n        }\n    }\n]",
    "loginUrl": "var r = {\n    \"s\": 0,\n    \"co\": 0,\n    \"urls\": [],\n    \"sourl\": \"https://alicesw.com\",\n    \"booklist\": []\n};\n\nif (!String(source.getVariable())) {\n    source.setVariable(JSON.stringify(r, null, \"\\t\"));\n    java.toast('已初始化，使用默认站源');\n}\n\nvar sgv = JSON.parse(source.getVariable());\nvar sg = source.get(\"list\");\nvar ul = GetUL();\n\nfunction reg() {\n    java.startBrowser(`${ul}/user/user/reg.html`, \"注册账号\");\n}\n\nfunction Comment() {\n    let sgvo = sgv.co;\n    sgv.co = sgv.co ? 0 : 1;\n    source.setVariable(JSON.stringify(sgv, null, \"\\t\"));\n    java.toast(`\\n评论区\\n【${[\"开启\", \"禁用\"][sgvo]} → ${[\"开启\", \"禁用\"][sgv.co]}】`);\n}\n\nfunction Updatelog() {\n    java.longToast(\"\\n\" + java.base64Decode(source.variableComment));\n}\n\nfunction login() {}\n\nfunction Tgch(o) {\n    const sort = [\"默认\", \"更新时间\", \"人气\", \"字数\"];\n    const msg = sgv.s === o ? `重复选择\\n当前排序方式已是【${sort[o]}】` \n                            : (sgv.s = o, source.setVariable(JSON.stringify(sgv, null, \"\\t\")), `已切换发现排序方式为【${sort[o]}】`);\n    java.toast(\"\\n\" + msg);\n}\n\nfunction Geturls() {\n    sgv.urls.length = 0;\n    try {\n        const res = org.jsoup.Jsoup.parse(java.get('https://alicesw.click/', {}).body()).select('.container a');\n        const url1 = java.base64Decode(res[0].attr('href').match(/['\"](.*?)['\"]/)[1]);\n        sgv.urls.push(String(url1).replace(/\\/?$/, \"\"));\n        \n        const url2 = java.base64Decode(res[1].attr('href').match(/['\"](.*?)['\"]/)[1]);\n        const src = java.get(url2, {}).body();\n        const seen = new Set();\n        for (let match of src.matchAll(/targetHref\\:\\s*[\"'](https?[^\"']+)\\/?[\"']/g)) {\n            if (!seen.has(match[1])) {\n                sgv.urls.push(match[1]);\n                seen.add(match[1]);\n            }\n        }\n        source.setVariable(JSON.stringify(sgv, null, \"\\t\"));\n\n        if (sgv.urls.length >= 2) {\n            java.toast(`获取成功，共获取到${sgv.urls.length}个接口\\n┎┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┒\\n${sgv.urls.join('\\n')}\\n┖┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┚`);\n        } else {\n            java.toast('获取失败，请重试或检查网络状况');\n        }\n    } catch (e) {\n        java.log(e);\n        java.toast('\\n未知错误，请检查网络或更新阅读版本！');\n    }\n}\n\nfunction Puturl(e) {\n    if (!sgv.urls.length) return java.toast('\\n当前没有接口，请获取后选择');\n    if (e + 1 > sgv.urls.length) return java.toast(`暂无第${e+1}接口`);\n    \n    try {\n        const stime = Date.now();\n        java.get(sgv.urls[e], {});\n        const speedtime = (Date.now() - stime) / 1000;\n        \n        sgv.sourl = sgv.urls[e];\n        sgv.booklist.forEach(item => {\n            item.img = item.img.replace(/https?:\\/\\/[^\\/]+/, sgv.urls[e]);\n            item.url = item.url.replace(/https?:\\/\\/[^\\/]+/, sgv.urls[e]);\n        });\n        source.setVariable(JSON.stringify(sgv, null, \"\\t\"));\n        \n        // 切换接口保持登录状态\n        const Cookie = cookie.getCookie(sgv.urls[e]);\n        if (!/lf_user_auth/.test(Cookie) && source.getLoginHeader()) {\n            cookie.setCookie(sgv.urls[e], source.getLoginHeaderMap().get('Cookie'));\n        }\n        java.toast(`已设置接口为：\\n${sgv.urls[e]}\\n♦解析用时${speedtime}秒♦`);\n    } catch (err) {\n        java.log(err.message);\n        java.toast(`\\n【接口${e+1}：${sgv.urls[e]}】\\n已失效，请检查网络状况或切换其他接口`);\n    }\n}\n\nfunction Login() {\n    cookie.removeCookie(ul);\n    const na = result['用户名/邮箱'];\n    const pa = result['密码'];\n    \n    if (!na || !pa) return;\n    \n    try {\n        const phpid = java.get(`${ul}/user/user/verify.html`, {}).header(\"set-cookies\");\n        const code = java.getVerificationCode(`${ul}/user/user/verify.html`);\n        const response = java.post(`${ul}/user/user/login.html`, \n            `username=${na}&password=${pa}&code=${code}`, \n            { \"x-requested-with\": \"XMLHttpRequest\", \"Cookie\": phpid });\n        \n        const ck = cookie.mapToCookie(response.cookies());\n        const usercode = JSON.parse(response.body()).msg;\n        java.toast(usercode);\n        \n        if (ck) {\n            source.putLoginHeader(JSON.stringify({\"Cookie\": ck}));\n            cookie.replaceCookie(GetUL(), ck);\n        } else {\n            source.removeLoginHeader();\n            cookie.removeCookie(GetUL());\n        }\n    } catch (e) {\n        java.log(e);\n        java.toast('\\n登录出错，请切换其他接口重试！');\n    }\n}\n\nfunction out() {\n    source.removeLoginHeader();\n    cookie.removeCookie(GetUL());\n    java.toast(\"已退出登录状态\");\n}\n\nfunction show() {\n    const jc = source.getLoginHeaderMap();\n    let us, id, codes;\n    \n    if (jc) {\n        const info = decodeURIComponent(decodeURIComponent(jc.get(\"Cookie\")).match(/\\{[\\s\\S]+\\}/)[0]);\n        const userInfo = JSON.parse(info);\n        us = userInfo.username;\n        id = userInfo.uid;\n        codes = \"✔️已登录\";\n    } else {\n        us = id = \"无\";\n        codes = \"❌未登录\";\n    }\n    \n    java.longToast(`\\n◎用户：${us}◎\\n◎用户ID：${id}◎\\n◎登录状态：${codes}◎`);\n}\n\n\nfunction InvitationCode(c) {\n    if (!source.getLoginHeaderMap()) return java.toast(\"未登录，请登录后获取\");\n    \n    let text = \"\";\n    if (c) {\n        java.post(ul + \"/user/user/createinvitecode.html\", \"create_num=1\", \n            {\"Cookie\": source.getLoginHeaderMap()[\"Cookie\"]});\n        text += \"\\n已消耗50积分生成一个邀请码\";\n    }\n    \n    const verify_list = org.jsoup.Jsoup.parse(java.ajax(ul + \"/user/user/invitecode\")).select('.verify_list .item');\n    java.log(\"\\n\" + String(verify_list.html()).replace(/<[^>]+?>\\s*|复制| (?!\\d)/g, \"\"));\n    java.toast(text + \"\\n邀请码已打印至源日志\");\n}\n\nfunction update(u) {\n\ttry {\n    const sourcetime = source.lastUpdateTime;\n    const upul = \"https://fastly.jsdelivr.net/gh/yezechuandl/source-legado@main/source/爱丽丝书屋.json\";\n    const uptime = JSON.parse(java.ajax(upul))[0].lastUpdateTime;\n    \n    if (+uptime > +sourcetime) {\n        java.toast(\"检测到更新，正在跳转……\");\n        Packages.java.lang.Thread.sleep(2000);\n        java.startBrowser('data:text/html;base64,' + nk, '更新');\n    } else if (u != \"发现\") {\n        java.toast(`\\n本地书源版本较新，无需更新。\\n本地：${timeov(sourcetime)}\\n网络：${timeov(uptime)}`);\n    }\n  } catch (e) {\n  \tjava.log(e.message);\n  \tjava.toast('未知错误');\n  }\n}\n\nfunction AFBook(ta) {\n    const info = result['书籍ID'];\n    if (!info) return java.toast(\"\\n未填入书籍id，请进书籍详情页，或者手动填写。\");\n    if (!source.getLoginHeaderMap()) return java.toast(\"未登录，请登录后使用\");\n    \n    try {\n        let url;\n        if (ta) {\n            url = `${ul}/user/bookshelf/add?novel_id=${info}`;\n        } else {\n            let src = \"\";\n            for (let page = 1;; page++) {\n                let sr = java.ajax(`${ul}/user/bookshelf?page=${page}`);\n                if (!/书架空空如也/.test(sr)) {\n                    src += sr + \"\\n\";\n                } else break;\n            }\n            \n            const booklist = src.match(/\\/novel\\/\\d+\\.html/g);\n            const dfid = src.match(/\\/user\\/bookshelf\\/del[^\"]+/g);\n            const index = booklist.findIndex(book => book.includes(info));\n            if (index === -1) return java.toast('未找到书籍');\n            url = GetUL() + dfid[index];\n        }\n        java.log(index + \"我的\")\n        const msg = java.get(url, {\"x-requested-with\": \"XMLHttpRequest\"});\n        java.toast(JSON.parse(msg.body()).msg);\n    } catch (error) {\n    \t   java.log(error);\n        java.toast('未知错误，已打印至日志');\n    }\n}\n\nfunction BookShelf() {\n    if (source.getLoginHeaderMap()) {\n        java.startBrowser(`${ul}/user/bookshelf/`, \"书架\");\n    } else {\n        java.toast(\"未登录，请登录后再使用此功能。\");\n    }\n}\n\nfunction inBookShelf() {\n    java.startBrowser(\"data:text/html;base64,\" + booklist(), \"书架\");\n}\n\nfunction bookinto() {\n    if (sg == '') return java.toast('🚫请进入书籍详情页后操作，或者刷新试试');\n    \n    const sg1 = JSON.parse(sg);\n    const exists = sgv.booklist.some(item => item.ID == sg1.ID);\n    \n    if (!exists) {\n        sgv.booklist.push(sg1);\n        source.setVariable(JSON.stringify(sgv, null, \"\\t\"));\n        java.toast(\"添加成功\");\n    } else {\n        java.toast(\"书籍已存入本地书架中\");\n    }\n}\n\nfunction bookmove(a) {\n\t  if (sg == '') return java.toast('🚫请进入书籍详情页后操作，或者刷新试试');\n        if (a == \"all\") {\n            source.put(\"list\", '');\n            sgv.booklist.length = 0;\n            source.setVariable(JSON.stringify(sgv, null, \"\\t\"));\n            java.toast('已清空本地书架');\n            return;\n        }\n        \n        const sg1 = JSON.parse(sg);\n        const index = sgv.booklist.findIndex(item => item.ID == sg1.ID);\n        \n        if (index != -1) {\n            sgv.booklist.splice(index, 1);\n            source.setVariable(JSON.stringify(sgv, null, \"\\t\"));\n            java.toast(`已从本地删除该书籍。\\n书籍ID：${sg1.ID}`);\n        } else {\n            java.toast('书籍不在本地书架中');\n    }\n}",
    "respondTime": 190259,
    "ruleBookInfo": {
      "author": "@get:{a}",
      "canReName": "1",
      "coverUrl": "@get:{i}\n@js: /^https?/.test(result) ? result : GetUL() + result;",
      "init": "<js>\nvar bookid = baseUrl.match(/novel\\/(\\d+)/)[1];\n//书评发送\nconst bookva = book.getVariable(\"custom\");\nif (bookva && bookva != \"\") {\n    if (source.getLoginHeader()) {\n        const commenturl = `${GetUL()}/home/comment/add.html`;\n        let body = `content=${bookva}&type=novel&mid=${bookid}`;\n        \n        try {\n            const code = String(java.getVerificationCode(`data:image/svg+xml;base64,${codesvg}`));\n            \n            if (code == \"评论\" || /^@\\d+$/.test(code)) {\n                if (/^@\\d+$/.test(code)) {\n                    body += `&pid=${code.match(/(\\d+)/)[1]}`;\n                }\n                \n                const headers = { \"x-requested-with\": \"XMLHttpRequest\" };\n                const response = java.post(commenturl, body, headers).body();\n                java.toast(JSON.parse(response).msg);\n            } else {\n                Packages.java.lang.Thread.sleep(40);\n                java.toast('请按图片要求填写');\n            }\n        } catch (err) {\n            java.log(err);\n        }\n    } else {\n        java.toast(\"未登录，请登录后操作\");\n    }\n    book.putCustomVariable(\"\");\n}\n\ntry {\n    sourceinfo = source.getLoginInfoMap();\n    sourceinfo['书籍ID'] = bookid;\n    if (bookid) {\n        source.putLoginInfo(JSON.stringify(sourceinfo));\n    }\n    $ = _ => String(java.getString(_));\n    img = /^https?/.test($('[property$=image]@content')) ? $('[property$=image]@content') : GetUL() + $('[property$=image]@content');\n    list = {\n        \"ID\": bookid,\n        \"img\": img,\n        \"name\": $('[property$=book_name]@content'),\n        \"author\": $('[property$=author]@content'),\n        \"info\": $('[property$=description]@content').slice(0, 45),\n        \"url\": \"legado://import/addToBookshelf?src=\" + baseUrl\n    }\n    source.put(\"list\", JSON.stringify(list));\n} catch (err) {\n    java.log(\"登录UI未初始化保存数据：\" + err);\n}\nsrc;\n</js>\n@put:{\"n\":\"[property$=book_name]@content\",\n\"a\":\"[property$=author]@content\",\n\"t\":\"class.fix@p.2:3@text##.*[：:]\",\n\"k\":\"class.tg@span@text##[\\n#/]##,\",\n\"i\":\"[property$=image]@content\",\n\"l\":\"[property$=latest_chapter_name]@content\",\n\"m\":\"text.查看全部章节@href\",\n\"z\":\"class.fix@p.4@text##.*[：:]\",\n\"o\":\"[property$=description]@content\"}",
      "intro": "&nbsp;&nbsp;📖书籍ID：{{baseUrl.match(/novel\\/(\\d+)/)[1]}}\n☑当前站源：{{GetUL()}}\n🏷️标签：@get:{k}\n📜简介：@get:{o}\n<js>\nconst Bookid = baseUrl.match(/novel\\/(\\d+)/)[1];\nconst contul = `${GetUL()}/index.php?s=/Home/comment/lists/id/${Bookid}/type/novel/limit/5/size/12`;\nvar CommentNur = JSON.parse(source.getVariable()).co;\nvar cont = \"\";\nif (!CommentNur) {\n    var src = java.ajax(contul);\n    java.setContent(src);\n    var list = java.getElement('//script[@src=\"/public/static/jquery/jquery.min.js\"]/following-sibling::script[1]');\n    var lists = JSON.parse(String(list[0]).match(/var\\s*trre=([\\s\\S]+),page_num/)[1]);\n    //java.log(JSON.stringify(lists,null,\"\\t\"));\n\n    cont += \"🔻评论区：\\n❗️右上角书籍变量填入评论后刷新详情页发送评论。❗️\\n\";\n    if (lists.length > 0) {\n        if (source.getLoginHeader()) {\n            let jc = source.getLoginHeaderMap();\n            let inf = decodeURIComponent(jc.get(\"Cookie\"));\n            let info = decodeURIComponent(inf).match(/\\{[\\s\\S]+\\}/)[0];\n            let myuid = JSON.parse(info)['uid'];\n            //处理我的评论数据\n            var myComments = [];\n\n            function collectMyComments(comment, parentPath) {\n                let floor = parentPath ? `${parentPath}-${comment.floorIndex}` : comment.floorIndex;\n                if (comment.uid === Number(myuid)) {\n                    myComments.push({\n                        id: comment.id,\n                        username: comment.user.username,\n                        group: comment.user.group,\n                        floor: `【${floor}楼】`,\n                        time: timeov(comment.create_time * 1000),\n                        content: comment.content\n                    });\n                }\n                if (comment._?.forEach) {\n                    comment._.forEach((child, index) => {\n                        child.floorIndex = index + 1;\n                        collectMyComments(child, floor);\n                    });\n                }\n            }\n            lists.forEach((c, i) => {\n                c.floorIndex = i + 1;\n                collectMyComments(c, \"\");\n            });\n            //java.log(JSON.stringify(myComments));\n            var mySection = \"=== 我的评论（共找到\" + myComments.length + \"条） ===\\n\\n\";\n            myComments.forEach(m => {\n                mySection += `┌【ID：${m.id}】| 👤${m.username} | ${m.group} | ${m.time}\\n└评论：${m.content}\\n${m.floor}\\n `;\n            });\n        } else {\n            mySection = \"\";\n        }\n\n        //处理全部评论数据\n        function buildComments(comment, parentPath, level) {\n            let floor = parentPath ? `${parentPath}-${comment.floorIndex}` : comment.floorIndex;\n            let indent = '  '.repeat(level);\n            let str = `${indent}┌【ID：${comment.id}】|👤${comment.user?.username || \"\"} | ${comment.user?.group || \"已注销用户\"} | ${timeov(comment.create_time * 1000)}\\n` +\n                `${indent}└评论：${comment.content}\\n` +\n                `${indent}【${floor}楼】\\n\\n`;\n\n            if (comment._?.forEach) {\n                comment._.forEach((child, index) => {\n                    child.floorIndex = index + 1;\n                    str += buildComments(child, floor, level + 1);\n                });\n            }\n            return str;\n        }\n\n        var allSection = \"=== 全部评论（共\" + lists.length + \"条） ===\\n\\n\";\n        lists.forEach((c, i) => {\n            c.floorIndex = i + 1;\n            allSection += buildComments(c, \"\", 0);\n        });\n\n        //合并评论数据\n        cont += mySection + \"\\n\" + allSection;\n    } else {\n        cont += \"本书暂时没有评论喔\";\n    }\n}\nresult = result + \"\\n\" + cont;\nresult;\n</js>",
      "kind": "@get:{t}\n@get:{k}",
      "lastChapter": "@get:{l}",
      "name": "@get:{n}",
      "tocUrl": "@get:{m}\n@js: GetUL() + result;",
      "wordCount": "@get:{z}"
    },
    "ruleContent": {
      "content": "@js:\nvar url = GetUL();\n//处理强制登录\nvar nn = String(cookie.getCookie(url));\nvar coks = nn.split('; ');\nvar ckk = coks.filter(item => !item.startsWith(\"lf_reader_num\")).join('; ');\ncookie.setCookie(url, ckk);\nvar chapterul = java.hexDecodeToString(src);\n\njava.log(\"当前阅读进度\" + book.durChapterIndex + \"|已加载进度\" + chapter.index);\n\n//自动处理验证\nfunction content() {\n    let html = java.ajax(chapterul);\n    if (!html.includes(\"滑动验证\") && java.getString('#chapterContent@html', html) !== \"\") {\n        return java.getString('#chapterContent@html', html);\n    }\n    let headers = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.171 Safari/537.36\",\n        \"Referer\": chapterul\n    };\n    try {\n        let s = html.match(/src=\\\"(\\/huadong[^\"]+)/)[1];\n        let sr = java.get(url + s, headers).body();\n        eval(sr.match(/(key=\\\".+?,value=\\\"[^;]+?\\;)/)[1]);\n        let va = getval(value);\n        let codeul = url + sr.match(/([^\"]+yanzheng_huadong\\.php[^\"]+)/)[1] + `${key}&value=${va}`;\n        let ck = java.get(codeul, headers);\n        java.log(\"验证Cookie：\" + JSON.stringify(ck.cookies()));\n        java.toast(\"检测到验证,尝试自动处理……\");\n\n        return java.getString('#chapterContent@html', java.ajax(chapterul));\n    } catch (error) {\n        java.log(error);\n        return \"自动验证失败，请重试!\";\n    }\n}\n\nlet text;\nif (Math.abs(chapter.index - book.durChapterIndex) <= 3) {\n    text = content();\n} else {\n    text = \"因网站速率限制，当前预下载超过三章，为避免被封ip，被动停止解析正文。\\n建议调小预下载，保持正常阅读速度，刷新即可重新获取\";\n}\n\n//处理重新获取文本时可能会出现的错误。\nlet retryCount = 0;\nconst maxRetries = 3;\nlet result;\nwhile (retryCount < maxRetries) {\n    if (text != false && text !== \"\") {\n        result = text;\n        break;\n    } else {\n        retryCount++;\n        java.toast(`未获取到文本，正在重试...（当前第${retryCount}次重试）`);\n        text = content();\n    }\n}\nif (retryCount === maxRetries) {\n    result = \"重试三次仍未获取到文本，请检查网络状况。\";\n}\nresult;",
      "imageStyle": "DEFAULT",
      "replaceRegex": "##\\n*{{chapter.title}}\\n*"
    },
    "ruleExplore": {
      "author": ".four@text||.t4@text||.mb-1 a@text",
      "bookList": "tbody > tr!0||.rec_rullist > ul||.list-group-item",
      "bookUrl": "a[href^=\"/novel/\"]@href\n@js: GetUL() + result;",
      "coverUrl": "img@src\n@js: /^https?/.test(result) ? result : GetUL() + result;",
      "intro": ".content-txt@text",
      "kind": "{{@@.sev@text%%.six@text}}\n{{@@.t6@text}}\n{{@@.t5@text}}\n{{@@small@text&&a[href$=\"tag\"]@text}}##\\[|\\]",
      "lastChapter": "a[href^=\"/book/\"]@text",
      "name": "a[href^=\"/novel/\"]@text##^\\d+?\\.",
      "wordCount": ".five@text||.mb-1@text\n@js:\nif (/search/.test(baseUrl)) result = result.split(/\\s|\\u3000/)[1].replace(/.*?：/, \"\");\nresult;"
    },
    "ruleSearch": {
      "author": ".mb-1 a@text",
      "bookList": ".list-group-item",
      "bookUrl": "a@href\n@js: GetUL() + result;",
      "intro": ".content-txt@text",
      "kind": "a[href$=\"tag\"]@text%%small@text##\\[|\\]",
      "name": "h5 a@text##^\\d+\\.",
      "wordCount": ".mb-1@text\n@js:result.split(/\\s|\\u3000/)[1].replace(/.*?：/, \"\");"
    },
    "ruleToc": {
      "chapterList": "class.section-list@a",
      "chapterName": "text",
      "chapterUrl": "href\n<js>\nvar url = GetUL() + result;\nresult = `data:;base64,${java.base64Encode(url)},{\"type\":\"chapter\"}`;\nresult;\n</js>",
      "preUpdateJs": "eval(String(source.loginUrl));\nvar sourceUL = GetUL();\nif (!String(book.bookUrl).includes(sourceUL)) {\n  book.bookUrl = String(book.bookUrl).replace(/https?:\\/\\/[^\\/]+/,sourceUL);\n  book.tocUrl = String(book.tocUrl).replace(/https?:\\/\\/[^\\/]+/,sourceUL);\n  java.toast(\"\\n检测到切换源站，已更新目录链接。\");\n   java.refreshTocUrl();\n}"
    },
    "searchUrl": "{{eval(String(source.loginUrl));GetUL();}}/search.html?q={{key}}&f=_all&sort={{Sort_('search')}}&p={{page}}&serialize=",
    "variableComment": "ICAgICAgICAg5rqQ5L2c6ICF77yaICDlpJzms73lt50gICAgICAgICAgCiAg6K+355So5pyA5paw5rWL6K+VKGJldGEp54mI6ZiF6K+75L2/55So6K+l5rqQCiAg5L2/55So6L+H56iL5Lit6YGH5Yiw6Zeu6aKY77yM6K+36IezR2l0aHVi5Y+N6aaI44CCCiAgICAgIOKVkOKVkOKVkOKVkOKVpOKVkOKVkOKVkOKVkOKVkAogIOabtOaWsOaXpeW/lyjov5HmnJ8pCuKUjuKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUkgogIOWPkeeOsOaWsOWinuiHquWumuS5ieagh+etvvCfj7fvuI/vvIzlj6/mjqfmjpLluo8gLSAyMDI1LjcuMjMKICDkv67lpI3mkJzntKLvvIzmjpLluo/lj6/kvZznlKjkuo7mkJzntKLvvIzph43mjpLnmbvlvZVVSSAtIDIwMjUuNy4xMAogIOS/ruWkjeaOpeWPo+iOt+WPliAtIDIwMjUuNi4yNwogIOaWsOWinumCgOivt+eggeWKn+iDve+8iOeUn+aIkOS4gOS4qua2iOiAlzUw56ev5YiG77yJLSAyMDI1LjYuNAogIOS8mOWMlumDqOWIhuinhOWImSjmjqXlj6Pojrflj5Yv6ZSZ6K+v5o+Q56S6KSAtIDIwMjUuNS4yOAogIOWIh+aNouaOpeWPo+iHquWKqOabv+aNouacrOWcsOS5puaetuS5puexjemTvuaOpSAtIDIwMjUuNS44CuKUluKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUheKUmgAAAA==",
    "weight": 0
  }
]